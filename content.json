{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"开发工具设置","date":"2019-09-12T08:39:09.300Z","updated":"2019-09-03T02:21:14.231Z","comments":true,"path":"2019/09/12/开发工具设置/","link":"","permalink":"http://yoursite.com/2019/09/12/开发工具设置/","excerpt":"","text":"IntellijJ IDEAIDEA创建JAVA Class时自动生成头部文档注释 File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Files-&gt;Class修改模板为： 1234567891011&gt;#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package &gt;$&#123;PACKAGE_NAME&#125;;#end&gt;&gt;/** &gt;* $&#123;NAME&#125;.java&gt; * User: Monica Jia&gt; * Date: $&#123;DATE&#125; Time: $&#123;TIME&#125;&gt; * Description: &gt; */&gt;public class $&#123;NAME&#125; &#123;&gt;&#125;&gt; 文档注释修改 Live Templates![1565851311102](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565851311102.png) 快捷键代码类 快捷键 说明 Alt+C 代码提示（自改原ctrl+shift+space） Ctrl+Alt+T 对选中代码增加包围代码，例如try-catch，if之类 Alt+Insert 对类增加getter/setter，toString之类的类级基础方法 Shift+F6 可以重命名你的类、方法、变量等等，而且这个重命名等 Ctrl+Alt+L 代码格式化 Ctr + Shift + u 大小写转换 Ctrl+O 重写父类方法 Ctrl+W 选中代码文本 Ctrl+P 方法参数提示。 Ctrl+Alt+O 优化导入的类和包 Ctrl+/或Ctrl+Shift+/ 注释（//或者/**/） Ctrl+Alt+鼠标左键 或 Ctrl+Alt+F3 打开接口的实现类 alt + enter 代码提示 CTRL+[shift] + 小键盘 [-/+ ] 折叠/展开[全部/当前]代码块 编辑类 快捷键 说明 Ctrl+D/Ctrl+Y 复制当前行/删除当前行 CTRL+SHIFT+UP/DOWN 移动行 Ctrl+Shift+Alt +鼠标左键可以一行一行的选 Alt+鼠标左键向下拉 按住鼠标滚轮向下拉 列编辑 Alt+L 最后一次编辑的地方原（Ctrl+Shift+Backspace） Ctrl+shift+F12 编辑区最大屏 文件查找 快捷键 说明 Ctrl+F12 查看类结构 Alt+F7 查找变量，方法的引用位置 Ctrl+E 查找最近编辑的文件，以及项目中的TODO等项目信息 Ctrl+N* 输入关键字查找文件 Ctrl+Shift+N 按文件名称 查找文件 Ctrl+Shift+F7 高亮所有选中文本 Ctrl+Shift+F 查找文本 Ctrl+Shift+R 替换文本 Shift+Shift 查找所有文件 Alt+←/→ 切换文件 Ctrl+E 最近文件跳转 ctrl + shift + 空格 跳转回上次编辑的地方 Ctrl + F11 书签跳转BookMarks,这个快捷键对于阅读别人的代码很有用 ctrl +shift + c 复制完整文件路径 ctrl +shift + v 将你最近复制的内容都放在剪切板上, 因此你可以做批量复制 提示 快捷键 说明 Ctrl+Q View | Quick Documentation 视图 查看代码文档 Ctrl+P View | Parameter Info 视图 参数信息 Ctrl+B Navigate | Declaration 导航 查看变量的声明，再次点击可以查看变量的调用 自动补全 快捷键 说明 Alt+J 提示所有智能补全代码 sout system.out itar for循环 psvm main方法补全","categories":[],"tags":[]},{"title":"","slug":"Intelij IDEA 学习","date":"2019-09-12T08:39:09.300Z","updated":"2019-08-22T09:55:01.053Z","comments":true,"path":"2019/09/12/Intelij IDEA 学习/","link":"","permalink":"http://yoursite.com/2019/09/12/Intelij IDEA 学习/","excerpt":"","text":"InteliJ IDEA 常用习惯/基础设置/全局设置全局设置进入方式 configure –&gt; Setting File –&gt; Other Setting –&gt;Default Setting File–&gt; setting 设置只对当前项目有效 https://www.bilibili.com/video/av21735428?p=4 ![1565318485837](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318485837.png) ![1565318403277](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318403277.png) InteliJ IDEA 配置 JDK 环境 project Default –&gt; project Structure ![1565318818877](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318818877.png) ![1565318973661](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318973661.png) 创建文件![1565319924004](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565319924004.png) Package Name and File Name can set at the same time main函数：psvm 打印：sout 配置 InteliJ IDEA JVM参数 8 G以上的电脑配置后显示速度会大大提高 help –&gt;Edit Custom VM Options… 123456789101112 # custom IntelliJ IDEA VM options-Xms128m ## 启动占用的最小内存 --&gt;1024m-Xmx750m ## 启动占用的最大内存 --&gt;2048m-XX:ReservedCodeCacheSize=240m ##--&gt;500m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow ![1565319924004](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\20190418110055800.png) 为Java Web 工程添加第三方依赖![1565333236796](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333236796.png) ![1565333448451](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333448451.png) ![1565333761841](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333761841.png) ![1565333845252](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333845252.png) Maven 配置![1565336174837](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565336174837.png) ![1565336314404](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565336314404.png) ![1565338489641](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565338489641.png) artifactId 命名建议使用下划线 Java Web 骨架 ![1565339083664](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339083664.png) Java SE 骨架 ![1565349372334](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565349372334.png) 文件夹定义![1565339462018](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339462018.png)![1565339476017](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339476017.png) Maven Tomcat 7 插件待填充 创建聚合工程骨架 ![1565341314120](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565341314120.png) 配置忽略文件![1565347814254](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565347814254.png) ![1565349228422](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565349228422.png) IntelliJ IDE 右侧功能条![1566467596857](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566467596857.png) IDEA创建JAVA Class时自动生成头部文档注释 File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Files-&gt;Class修改模板为： 1234567891011&gt; #if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package &gt;$&#123;PACKAGE_NAME&#125;;#end&gt; &gt; /**&gt; * $&#123;NAME&#125;.java&gt; * User: Monica Jia&gt; * Date: $&#123;DATE&#125; Time: $&#123;TIME&#125;&gt; * Description: &gt; */&gt; public class $&#123;NAME&#125; &#123;&gt; &#125;&gt; 文档注释修改 Live Templates![1565851311102](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565851311102.png) 快捷键代码类 快捷键 说明 Alt+C 代码提示（自改原ctrl+shift+space） Ctrl+Alt+T 对选中代码增加包围代码，例如try-catch，if之类 Alt+Insert 对类增加getter/setter，toString之类的类级基础方法 Shift+F6 可以重命名你的类、方法、变量等等，而且这个重命名等 Ctrl+Alt+L 代码格式化 Ctr + Shift + u 大小写转换 Ctrl+O 重写父类方法 Ctrl+W 选中代码文本 Ctrl+P 方法参数提示。 Ctrl+Alt+O 优化导入的类和包 Ctrl+/或Ctrl+Shift+/ 注释（//或者/**/） Ctrl+Alt+鼠标左键 或 Ctrl+Alt+F3 打开接口的实现类 alt + enter 代码提示 CTRL+[shift] + 小键盘 [-/+ ] 折叠/展开[全部/当前]代码块 编辑类 快捷键 说明 Ctrl+D/Ctrl+Y 复制当前行/删除当前行 CTRL+SHIFT+UP/DOWN 移动行 Ctrl+Shift+Alt +鼠标左键可以一行一行的选 Alt+鼠标左键向下拉 按住鼠标滚轮向下拉 列编辑 Alt+L 最后一次编辑的地方原（Ctrl+Shift+Backspace） Ctrl+shift+F12 编辑区最大屏 文件查找 快捷键 说明 Ctrl+F12 查看类结构 Alt+F7 查找变量，方法的引用位置 Ctrl+E 查找最近编辑的文件，以及项目中的TODO等项目信息 8Ctrl+N* 输入关键字查找文件 Ctrl+Shift+N 按文件名称 查找文件 Ctrl+Shift+F7 高亮所有选中文本 Ctrl+Shift+F 查找文本 Ctrl+Shift+R 替换文本 Shift+Shift 查找所有文件 Alt+←/→ 切换文件 Ctrl+E 最近文件跳转 ctrl + shift + 空格 跳转回上次编辑的地方 Ctrl + F11 书签跳转BookMarks,这个快捷键对于阅读别人的代码很有用 ctrl +shift + c 复制完整文件路径 ctrl +shift + v 将你最近复制的内容都放在剪切板上, 因此你可以做批量复制 提示 快捷键 说明 Ctrl+Q View | Quick Documentation 视图 查看代码文档 Ctrl+P View | Parameter Info 视图 参数信息 Ctrl+B Navigate | Declaration 导航 查看变量的声明，再次点击可以查看变量的调用 自动补全 快捷键 说明 Alt+J 提示所有智能补全代码 sout system.out itar for循环 psvm main方法补全","categories":[],"tags":[]},{"title":"","slug":"communityProject","date":"2019-09-12T08:39:00.180Z","updated":"2019-08-30T09:36:49.541Z","comments":true,"path":"2019/09/12/communityProject/","link":"","permalink":"http://yoursite.com/2019/09/12/communityProject/","excerpt":"","text":"中心主题用到的技术 SpringBoot Spring MVC IDEA/Shutcut Refactor Source Code Git/GitHub BootStrap Github Authorization Properties Session &amp; Cookies MySQL/H2 MyBatis heroku 国外 部署 Maven Distribution Session 分布式session 何时何地重启服务都不会影响用户登录 Flyway 持续的数据库脚本跟新 lombok Dev Tools 热部署 Pagination 数据库分页 Interceptor 拦截器 MBG MyBatis Generator 数据库快速生产 Exception Handler Restful/JSON 前后端分离地做JSON Mark Down Image Upload Logging Profile Deploy项目实施新建工程 new project Spring Initializar ![1565849992477](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565849992477.png)Group :域名倒序排列dependencies :web 后面需要什么手动输入pom文件引入依赖 thymeleaf（https://spring.io/guides） 和 dev-tools（热部署^1，） 12345&gt;&lt;dependency&gt; &gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&gt;&lt;/dependency&gt;&gt; 在pom.xml中添加以下配置 12345&gt; &lt;dependency&gt;&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&gt; &lt;/dependency&gt;&gt; 注意：IDEA进行SpringBoot热部署失败的原因出现失败，原因可能不是部署配置问题，其原因是因为IntelliJ IDEA 默认情况下不会自动&gt;编译，需要对IEDA进行自动编译的设置，如下： （1）File–&gt;Setting–&gt;compiler –&gt;build project automatically（2）Shift+Ctrl+Alt+/ –&gt;Registry–&gt;![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) 建立gitHub仓库，上传代码 https://github.com/870727741/code_community 新建gitHub空白仓库 –&gt;Setting–&gt;Deploy keys 部署key 公钥/私钥？ 建立本地代码仓库并提交到github 打开终端 terminal 12345678910set pa=%cd%echo %pa% #查看当前路径git initgit status ##查看所有文件状态，红色未提交git add . ##此操作前先检查忽略文件git commit -m \"init repo\"git status git loggit remote add origin https://github.com/870727741/code_community.gitgit push -u origin master 创建README.md （自述文件） 更新本地仓库并推送到远端12345678git add.git statusgit commit -m \"自述文档\" #-m 意思是添加注释？##commit 之后又修改了一小部分，用下列命令git add .git commit --amend --no-edit #--amend 追加## 最后再推送git push 前端/交互界面/web端界面设计参考网站：中文社区 引入BootStrap 下载BootStrap开发文档 https://v3.bootcss.com/ 在html 文件中引入 bootstrap css js 文件(IDEA 中可以直接将文件拖入HTML 中)1234&lt;link rel=\"stylesheet\" href=\"css/bootstrap.min.css\"/&gt;&lt;link rel=\"stylesheet\" href=\"css/bootstrap-theme.min.css\"/&gt;...&lt;scripyt src=\"js/bootstrap.min.js\" &gt; 页面设计编写 首页导航栏 功能登录功能 之授权登录 github授权登录 https://developer.github.com/apps/ 下载 Visual Paradigm https://www.visual-paradigm.com 绘制时序图，熟悉流程![1565868239209](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565868239209.png) 3.整体结构 ![1566444583201](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566444583201.png) 配置的分离1234## gitHub授权用到的相关配置github.client_id=a273d1897ea2a1e6fc29github.client_secret=d3f308353a0cf47ffa44c6e605e6ccdc5ef18aacgithub.redirect_uri=http://localhost:8080/callback 1234567891011@Controllerpublic class AuthorizeController &#123; @Autowired private GitHubProvider gitHubProvider; @Value(\"$&#123;github.client_id&#125;\") private String client_id; @Value(\"$&#123;github.client_secret&#125;\") private String client_secret; @Value(\"$&#123;github.redirect_uri&#125;\") private String redirect_uri; ... Session 和 Cookies原理和实现12345678910// HttpServletRequest requestGitHubUser githubUser=gitHubProvider.getGitHubUser(accessToken);if(githubUser !=null )&#123;//登陆成功，写cookie 和sessionrequest.getSession().setAttribute(\"githubUser\",githubUser);return \"redirect:index\";&#125;else&#123;//登录失败，重新登陆return \"redirect:index\";&#125; ServletContext HttpSession 以及HttpServletRequest之间的关系: [共同点]不管对象的作用域怎样，共享变量和获得变量的 方法都是一致的–setAttribute(“varName”,obj);–getAttribute（“varName”）。 变量的作用域ServletContext–范围最大。应用程序级别的，整个应用程序都能訪问HttpSession – 次之，会话级别的，在当前的浏览器中都能訪问[不论是在同一浏览器开多少窗体，都能够訪问]。可是换个浏览器就不行了。就必须又一次创建sessionHttpServletRequest –范围最小，请求级别，请求结束，变量的作用域也结束[也就是仅仅是一次訪问，訪问结束，这个也结束] 数据库学习与了解MySQLH2 Database Engine 内嵌式数据库 依赖配置Maven仓库—&gt;H2 copy dependency –&gt;pom.xml 12345678&gt;&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;&gt;&lt;dependency&gt;&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt;&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt;&gt; &lt;version&gt;1.4.199&lt;/version&gt;&gt; &lt;scope&gt;test&lt;/scope&gt;&gt;&lt;/dependency&gt;&gt; 在IntelliJ IDEA中创建数据库 官方 quickstart Add the h2*.jar to the classpath (H2 does not have any dependencies) Use the JDBC driver class: org.h2.Driver The database URL jdbc:h2:~/test opens the database test in your user home directory A new database is automatically created 将h2*.jar添加到类路径(h2没有任何依赖项)使用JDBC驱动程序类:org.h2.Driver数据库URL jdbc:h2:~/test打开用户主目录中的数据库测试将自动创建一个新数据库 打开IntelliJ IDEA 右侧 Database–&gt;“+”–&gt;dataSource–&gt;H2 url–&gt;jdbc:h2:~/code_community 选择 Embedded ：内嵌式数据库 创建数据库表格![1566469417961](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566469417961.png) token:存放cookie uuid形式gmt_creat【modifued】:格林威治时间戳形式 集成mybatis 并实现CURD操作参考文档 浏览器搜索 spring boot mybatis，查看官方mybatis集成文档。 参考spring boot官方文档 pom.xml添加相关依赖 pom.xml 1234567891011121314151617&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.15&lt;/version&gt;&lt;/dependency&gt;&lt;!--jdbc依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--集成mybatis--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt;&lt;dependency&gt; 配置properties相关数据库数据源信息 1234spring.datasource.url=jdbc:mysql://localhost/test[jdbc:h2:~/code_community][jdbc:mysql:~/code_community]spring.datasource.username=root[sa]spring.datasource.password=root[123]spring.datasource.diver-class-name=com.mysql.jdbc.Diver[org.h2.Diver] 编写 Mapper 123456@Mapperpubic interface UserMapper&#123; @Insert(insert into code_community_user(name,account_id,token,gmt_create,gmt_modified)values(#&#123;name&#125;,#&#123;accountId&#125;,#&#123;token&#125;,#&#123;gmtCreate&#125;,#&#123;gmtModified&#125;)) void addUser(CodeCommunityUser codeCommunityUser); &#125; 123456789@Datapubic class CodeCommunityUser&#123; private Integer id; private String name; private String accountId; private String token; private Long gmtCreate; private Long gmtModified;&#125; 控制层获取到信息后添加到数据库 Flyway Migration数据库版本控制工具 编写问题发布页面（仿照中文网）后端建表![1567157035331](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567157035331.png)","categories":[],"tags":[]},{"title":"","slug":"power_system_manager","date":"2019-09-12T08:39:00.180Z","updated":"2019-09-06T01:08:28.689Z","comments":true,"path":"2019/09/12/power_system_manager/","link":"","permalink":"http://yoursite.com/2019/09/12/power_system_manager/","excerpt":"","text":"power_system_manager中智电烨旗下电力设备管理工具——电路 前期准备项目转移设想将用Eclipse 开发的 普通的SSM+MySQL+jsp项目转换为 IntelliJ IDEA 开发的 Spring Boot集成 MyBatis+MySQL+JSP的MAVEN项目 开发环境 OS： Windows 10 DataBse: MySQL(Navicat Premium 12) IDE ：IntelliJ IDEA Start First —&gt; Spring InitializergroupId:power_system_manager打包方式：warmaven projectdescription: 中智电烨旗下电力设备管理工具初始化lib ![1567568033215](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567568033215.png) Two创建自述文档 README.md Three pom文件增加注释并添加部分需要的依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.7.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.zzdy&lt;/groupId&gt; &lt;artifactId&gt;power_system_manager&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;power_system_manager&lt;/name&gt; &lt;description&gt;中智电烨旗下电力设备管理工具&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--mybatis集成--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!--mysql驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!--集成jsp，需要打war包，所需要的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;version&gt;8.5.20&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--pagehelper--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--druid数据库连接池管理--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.16&lt;/version&gt; &lt;/dependency&gt; &lt;!-- simple-image --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;simpleimage&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- ezmorph:Simple java library for transforming an Object to another Object. --&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.ezmorph&lt;/groupId&gt; &lt;artifactId&gt;ezmorph&lt;/artifactId&gt; &lt;version&gt;1.0.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- gson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.8.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--maven项目packaging为war类型时，必须要加这个插件--&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;configuration&gt;&lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 整合JSP参考 SpringBoot Study2.md 热部署设置 devTools依赖已经引入 File–&gt;settings–&gt;Build,Ex…–&gt;Compiler–&gt; Buile project automatically Shift+Ctrl+Alt+/ –&gt;Registry–&gt; ![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) 设置网站图标 icon Favicon参考 SpringBoot Study.md application.properties配置文件配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647server.port=8080server.servlet.context-path=/power_system_manager#durid#8.0之后的新驱动名称，要求URL中必须配置时区spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driverspring.datasource.url= jdbc:mysql://192.168.0.130:3306/test_zzdy2?characterEncoding=utf-8&amp;useUnicode=true&amp;serverTimezone=GMT%2B8&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=tigerspring.datasource.type = com.alibaba.druid.pool.DruidDataSource# 下面为连接池的补充设置，应用到上面所有数据源中# 初始化大小，最小，最大spring.datasource.druid.initialSize=3spring.datasource.druid.minIdle=1spring.datasource.druid.maxActive=5# 配置获取连接等待超时的时间 , 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。spring.datasource.druid.maxWait=60000# 配置一个连接在池中最小生存的时间，单位是毫秒spring.datasource.druid.min-evictable-idle-time-millis=300000# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒spring.datasource.druid.time-between-eviction-runs-millis=60000#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用spring.datasource.druid.validation-query=SELECT &apos;x&apos; FROM DUAL# 建议配置为true，不影响性能，并且保证安全性。作用：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。spring.datasource.druid.test-while-idle=true# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。spring.datasource.druid.test-on-borrow=false# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能spring.datasource.druid.test-on-return=false# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。spring.datasource.druid.pool-prepared-statements=true#当大于0时，poolPreparedStatements自动触发修改为true。spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙#spring.datasource.druid.filter-class-names=stat# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat日志用的filter:log4j 防御sql注入的filter:wall#spring.datasource.druid.filters=stat,wall,log4j# 通过connectProperties属性来打开mergeSql功能；慢SQL记录#spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000# 合并多个DruidDataSource的监控数据#spring.datasource.druid.useGlobalDataSourceStat=true#mybatis配置#mybatis.config-location=classpath:mybatis/mapper/*.xml#mybatis.mapper-locations=classpath:mybatis/mybatis-config.xml#mybatis.type-aliases-package= 创建测试Controller 123456789101112131415161718192021package com.zzdy.power_system_manager.testcontroller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;/** * SayHello.java * User: Monica Jia * Date: 2019/9/4 Time: 11:56 * Description: */@Controllerpublic class SayHello &#123; @RequestMapping(\"/\") @ResponseBody public String sayHello()&#123; return \"hello Monica!\" ; &#125;&#125; 转移login","categories":[],"tags":[]},{"title":"","slug":"小知识点行业名词术语","date":"2019-09-12T08:38:51.621Z","updated":"2019-08-16T01:40:47.907Z","comments":true,"path":"2019/09/12/小知识点行业名词术语/","link":"","permalink":"http://yoursite.com/2019/09/12/小知识点行业名词术语/","excerpt":"","text":"E2E 端到端参考来源：前端E2E测试略解 e2e或者端到端（end-to-end）或者UI测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有UI会暴露给用户。 E2E（End To End）即端对端测试，属于黑盒测试，通过编写测试用例，自动化模拟用户操作，确保组件间通信正常，程序流数据传递如预期。 名称 断言 是否跨浏览器支持 实现 官网 是否开源 nightwatch assert 和 Chai Expect 是 selenium http://nightwatchjs.org/ 是 cypress Chai、Chai-jQuery 等 否 Chrome https://www.cypress.io/ 是 testcafe 自定义的断言 是 不是基于 selenium 实现 https://devexpress.github.io/testcafe/ 是 katalon TDD/BDD 是 未知 https://www.katalon.com/katalon-studio/ 否 nightwatch 需要安装配置 selenium，selenium-server需要安装jdk（Java Development Kit）。 cypress 安装方便，测试写法和单元测试一致，只支持 Chrome 类浏览器，有支持其他浏览器的计划 testcafe 安装方便，测试写法与之前的单元测试差异比较大，编写测试用例时只能选择到可见的元素 katalon 不是测试框架，是 IDE ，比较重，并且不开源，测试用例不是用 js 编写但是可以通过 Chrome 插件录测试用例 经过测试使用对比，nightwatch和cypress是vue推荐的框架，社区活跃度较高，功能较为完备，开源，推荐二选一（nightwatch需要装jdk，准备工作多，但API丰富度更高；cypress有自己的可视化窗体，能记录运行信息，重现bug精品） nightwatch 安装1npm i selenium-server nightwatch chromedriver -D chromedriver 安装需要翻墙，很坑，如果没梯子去网上搜罗单独的包，然后改配置文件 配置根目录新建nightwatch.conf.js（也可json，推荐js）：1234567891011121314151617181920212223242526272829303132333435363738394041 module.exports = &#123; // 测试文件入口 src_folders: ['tests'], // 输出报表路径 output_folder: 'reports', // selenium配置 selenium: &#123; start_process: true, server_path: require('selenium-server').path, host: '127.0.0.1', // selenium log输出 log_path: 'reports', port: 9090, cli_args: &#123; 'webdriver.chrome.driver': require('chromedriver').path, 'webdriver.gecko.driver': require('chromedriver').path &#125; &#125;, test_settings: &#123; default: &#123; launch_url: 'http://localhost', selenium_port: 9090, selenium_host: 'localhost', silent: true, screenshots: &#123; enabled: false, path: '' &#125; &#125;, chrome: &#123; desiredCapabilities: &#123; browserName: 'chrome', javascriptEnabled: true, acceptSslCerts: true &#125; &#125; &#125;&#125;; 3.测试用例新建tests文件夹，在里面新建test.js，内容如下： 123456789101112 module.exports = &#123; 'Demo test Baidu' : function (browser) &#123; browser .url('www.baidu.com') .waitForElementVisible('body', 1000) .setValue('input[name=wd]', 'NightWatch') .click('#su') .pause(1000) .assert.containsText('#container', 'NightWatch') .end(); &#125;&#125;; 运行①推荐在package.json中配置123 \"scripts\": &#123; \"test\": \"./node_modules/.bin/nightwatch --env\"&#125;, 就可以直接 npm test，也可以在shell中手动。②根目录新建entry.js（名字自起） 1require('nightwatch/bin/runner.js'); 之后shell中 node entry.js cypress1.安装 1npm install cypress --save-dev 启动1./node_modules/.bin/cypress open 可添加npm scripts 写测试用例1touch &#123;your_project&#125;/cypress/integration/simple_spec.js 123456789101112131415describe('My First Test', function() &#123; it(\"Gets, types and asserts\", function() &#123; cy.visit('https://example.cypress.io') cy.contains('type').click() // Should be on a new URL which includes '/commands/actions' cy.url().should('include', '/commands/actions') // Get an input, type into it and verify that the value has been updated cy.get('.action-email') .type('fake@email.com') .should('have.value', 'fake@email.com') &#125;)&#125;) Git，Github,gitlib,gitlab分别是什么 git 是一个版本管理软件，由linux之父花了三天搞出来的东西，他没有界面，只支持命令行。 github 是一个网站，因为git没有图形界面，github它支持在线的几乎所有git的操作，最重要它也是一个包含了很多程序员的开源社区。 gitlib 是用于实现git功能的开发库 githab 提倡开源，如果你不想开源就要花钱，你如果不愿意花钱，就自己搞个服务器，装gitlab这个软件来实现自己的版本控制，有点私服的概念。 作者：笑笑酱丶链接：https://www.jianshu.com/p/26fa7df41c9a来源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 前后端分离https://blog.csdn.net/fuzhongmin05/article/details/81591072 聚合工程聚合的概念 把项目的各个模块（子工程）聚合在一起构建。一般用于分模块开发,最后整体打包发布 Maven Project独立运行 Maven Module无法独立运行 聚合工程开发步骤 根项目是一个pom项目。 子模块：Maven Module 每个模块写完后需要上传到私服（略） 打包，需要整体打包找到最后的war项目使用Tomcat加载 实际中，我们会将一些庞大的项目拆分为若干模块进行开 三层+MVC 如下： 父工程maven-core所有的项目所需要的jar包都放在父工程的pom.xml下子工程model——-jar子工程dao———-jar子工程service——jar子工程web———-war注意：聚合打包时（install），选择父工程进行聚合发布到tomcat运行时（tomcat7:run）,选择web工程进行发布运行 工程聚合和继承的区别聚合是为了方便快速构件项目。对于聚合模块来说，它知道有哪些被聚合的模块，但那些模块不知道这个聚合模块的存在继承是为了消除重复配置。对于继承关系的父POM来说，它不知道有哪些子模块继承于它，但是子模块必须知道自己的父POM是什么; 聚合模块和微服务的区别聚合工程就是把一个工程分为各个部件,这些包括根项目pom可以用来控制依赖的版本号,实体类taobao-bean,持久层接口taobao-dao,业务层service:taobao-service,web层taobao-web.工具类taobao-utils等,可以分为这么多的模块平行开发,这些部件都不可以单独运行,它们之间相互依赖,最后合在一起成为一个完整可运行的web项目;而这个web项目就可以成为是一个微服务,微服务可以是一个聚合工程,也可以不是,只是选择要不要这么开发而已,当其他的微服务需要使用另一个微服务的实体类时,这个时候我们可以直接导入它的实体类坐标即可,不用再次创建,就好像吃饭,朋友已经买了勺子,我喝汤的时候既可以用一下喝一口汤,达到重复使用的目的 读写分离 编辑为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。· 敏捷开发 目前参与过公司的项目，公司专业从事敏捷开发，也比较成熟，可以分享下其中的细节。 概念，可以参考敏捷宣言，强调适应变化，四句指导 个体和互动 高于 流程和工具（动员每个人积极交流，相互之间可以 battle，头脑风暴）；工作的软件 高于 详尽的文档（好的代码是不需要注释和文档的，顶多有一些规范指南一类的在线协作文档）；客户合作 高于 合同谈判（真心实意为客户创造价值，而不止于眼前的功能交付，这个很难，由此还专门有一个角色去 control 这件事）；响应变化 高于 遵循计划（计划是赶不上变化的，随时改需求随时变动迭代计划，有迭代的概念）； 基于于右边，而更注重左边的价值，并不是说完全抛弃传统的瀑布式开发。 人员架构 因为公司没有所谓的各种领导，这里就说下交付组里，我所见的一些角色，也是每天在一起工作的小伙伴： PM：项目管理者，这里不是项目经理，负责和客户签合同，各种会议的组织者，没有项目经理那种权利BA：业务分析师，专门和客户谈需求，超强的交流和控制客户的能力，几乎每天都和客户泡在一起开会过需求，疯狂开会，驱动客户（我们组的BA是御姐型的，气场极强）QA：测试人员DEV：开发人员，其中有掌握技术话语权的 TL PO：比较特殊，是客户某的部门领导人，一般和 PM 单独沟通，几乎没出现过，网友一样的存在 一个团队一般 1 PM、1 BA、1 QA 、6 DEV (三前三后，至少两个TL) 这里没有 MS，所以每个人都是 SM，233333 会议 IPM：迭代会议，每个迭代开始之前开一次，主要是排下个迭代的故事卡，并给每张卡估点，我遇到的是两周一个迭代（一般会有卡墙，有物理的，也有线上的）Showcase：开发成果展示，每个迭代结束开一次，一般是BA或QA给客户演示上个迭代做的功能，当然也是优化和新改动提得最多的时候Retro：回顾会议，每个迭代结束开一次，讨论上个迭代团队做得好和做得不好的事（不是针对和人，不含人身攻击），并给出改进方案，在下个迭代中执行Stand Up：每天早上的站会，大家站成一圈，一般由 PM 主持，轮流阐述自己的昨天工作内容和工作进度，和今天要完成的工作，以及遇到的一些问题，及时反馈出来（我们组有个小龙猫的毛绒玩具，大家挨个传递，挨个阐述） 每天还有 Code Review，动态安排时间，我们团队一直坚持，刚开始是前后端一起过昨天每个人写的代码，后面时间太长，就前后端分开。大家一起来找茬，你的命名和代码逻辑划分，代码风格，都有个能会被挑刺。在相互找茬的过程中，坚持下去，对个人的成长有很大很大的帮助。 写代码 DEV 要做开发，就要先领故事卡，俗称开卡，自己选好一张故事卡，拉上BA和QA去过其中的细节，理清细节，然后才能上手开发，开发完后再拉上BA和QA去结卡，检查卡中的功能是不是都完成了，有问题就被打回去改，直到BA和QA觉得完善了，才能关卡。。。 代码质量要求很严格，遵循 TDD，前端有 lint，有单元测试（不能偷懒，而且有覆盖率要求），有 测试（必须写，和QA一起看），当你的代码走过这三个流程，提交到公共仓库，CI 自动构建会拉你的代码，再走一遍测试（挂了就要修代码），然后自动发布新版本到 Dev 环境。 你以为这就完了？还有代码嗅探器，时刻在扫描代码仓库，有两个重复的函数不行、重复率太高不行、使用了骚代码去做类型转换之类的不行、空间内有命名重叠不行…这一套下来，再加上 code review，菜鸟开发每天一半的时间都在改昨天的代码。项目还有规定，CI 不能红过夜，当天的问题当天要修好。 结语以上这些，小公司就别说什么没时间，项目吃紧，然后就没做，自求多福吧这些都是我所经历的，敏捷实践各不相同，大家看看就好SpringBoot、SpringCloud 全家桶要会，会点微服务，基础的 Java8 知识，熟练使用 stream 编程之类的，目前我们组的 Java 开发一半时间都是在写测试用例，要会写单元测试+集成测试之类的。","categories":[],"tags":[]},{"title":"","slug":"Win命令+快捷键","date":"2019-09-12T08:38:51.620Z","updated":"2019-09-11T03:23:08.745Z","comments":true,"path":"2019/09/12/Win命令+快捷键/","link":"","permalink":"http://yoursite.com/2019/09/12/Win命令+快捷键/","excerpt":"","text":"DOS命令 当前所在文件路径：输入【set pa=%cd%】回车。继续，输入命令：【echo %pa%】回车了。![1565085234591](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565085234591.png) 清屏 cls 文件夹相关 创建文件夹使用 md 或mkdir 命令来创建，其中md和mkdir都是建立新目录make directory的意思，完整命令是md [盘符:][路径]新目录名，比如：md c:\\test\\myfolder； 删除文件夹使用 rd 或rmdir 命令来删除空文件夹(rd:remove directory)；使用命令 rd/s 或rmdir/s 命令删除文件夹(不管是否为空)，会提示是否删除，输入y才能删除；使用命令 rd/s/q 或rmdir/s/q 命令删除文件夹(不管是否为空)，可以直接删除(/q，即quiet，安静模式;/s:subdirectory,子目录)； 创建文件使用 cd&gt;a.txt，type nul&gt;a.txt，copy nul&gt;a.txt 三种方式创建空文件；用 echo [file content]&gt;a.txt 创建非空文件 删除文件使用del a.txt; 查看当前目录下的文件/文件夹 dir [/a] –查看当前文件夹下所有文件 以记事本的方式查看文件（注意不可编辑） type 文件名 例如（注意空格）：查看当前路径下的文件 type _config.yml 打开文件并编辑（注意空格） start _config.yml 总结注意事项Windows 快捷键 注意：本人 操作系统为Windows 10 Ctrl+W 关掉当前页面 Ctrl+Shift+T 恢复刚关掉的浏览器页面 Alt+F4 关闭应用 Windows+L 随手锁屏 Windows+↑ /Windows+↓ 调整页面占屏幕比例 Windows+M：最小化所有窗口 Alt+空格+N 最小化当前窗口 Windows+D 显示桌面 Windows+R 打开 运行 Windows+E 打开文件资源管理器 Alt+tab 切换不同已打开的应用 ctrl+PgUp/PgDown 同一应用内切换不同页面 windows+ ; 选择表情 windows+v 打开粘贴板 粘贴/复制等的就不写了吧，这些我个人用的总结下~","categories":[],"tags":[]},{"title":"","slug":"LINUX学习快捷键+命令","date":"2019-09-12T08:38:51.619Z","updated":"2019-08-13T00:55:24.758Z","comments":true,"path":"2019/09/12/LINUX学习快捷键+命令/","link":"","permalink":"http://yoursite.com/2019/09/12/LINUX学习快捷键+命令/","excerpt":"","text":"Linux 英/ˈlɪnəks/ 美 /ˈlaɪnəks; ˈlɪnəks/ 当前文件夹路径 pwd 查看文件/文件夹列表 ls [-a|d|l] 新建文件夹 mkdir 新建文件夹并设置权限 mkdir -m [711|rwx–x–x] 文件夹名字 新建多级文件夹 mkdir -p ../jmptest/test1 移除空文件夹 rmdir 文件名 vim 编辑文本文件 文本文件保存退出 ？ esc+:wq Linux 文件基本属性Linux 文件基本属性","categories":[],"tags":[]},{"title":"","slug":"SpringBoot Study","date":"2019-09-12T08:37:21.023Z","updated":"2019-09-12T03:26:01.479Z","comments":true,"path":"2019/09/12/SpringBoot Study/","link":"","permalink":"http://yoursite.com/2019/09/12/SpringBoot Study/","excerpt":"","text":"SpringBoot基础学习目标 能够理解SpringBoot的 优缺点 能够理解SpringBoot的 特点 能够理解SpringBoot的 核心功能 能够配置SpringBoot的环境 能够完成application.propertoes文件的配置 能够完成application.yml文件的配置 能够使用SpringBoot集成MyBatis 能够使用SpringBoot集成Junit SpringData JPA Spring 的优点分析 Spring是java企业版（JEE）的轻量级代替品；无需开发重量级的Enterprise JavaBean(EJB),Spring通过依赖注入和面向切面编程；用简单的Java对象（Plain Old Java Object ,POJO）实现了EJB的功能。 Spring 的缺点分析重量级的配置。Spring2.5引入了基于注解的组件扫描，消除了大量基于应用程序自身组件的XML配置；Spring3.0引入了基于JAVA的配置，这是一种类型安全可重构配置方式；以代替 XML。项目的依赖管理。环境搭建搭建时，需要分析导入哪些库的坐标以及与之有依赖库的坐标；依赖版本选错；产生兼容问题。SpringBoot基于约定优于配置的思想，对上述缺点进行了改善和优化。 SpringBoot 的特点 基于Spring开发的快速入门体验 开箱即用；无代码生成，无需配置XML；可以修改默认值满足特定需求 提供了一些大型项目中常见的非功能性特性；如嵌入式服务器，安全 指标，健康监测，外部配置等 SpringBoot不是对于Spring功能上的增强；而是提供了一种快速使用Spring的方式##SpringBoot的核心功能 起步依赖起步依赖本质上是一个Maven项目对象模型（Project Object Model,POM）,定义了对其他库的传递依赖；这些东西加在一起支持某项功能。简而言之，起步依赖是讲具有某种功能的坐标打包到一起，提供一些默认的功能。 自动配置SpringBoot的自动配置是一个运行时的过程SpringBoot 快速入门代码实现 创建Maven工程 添加SpringBoot起步依赖![1565404627177](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565404627177.png) SpringBoot要求，项目要继承SpringBoot的起步依赖 spring-boot-start-parent springboot_quick.iml–&gt;project–&gt;parent 123456&lt;!--所有的springBoot都必须集成--&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring.boot.starter.parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;&lt;/parent&gt; SpringBoot 要集成SpringMVC进行Controller,所以项目要导入web的启动依赖 springboot_quick.iml–&gt;project–&gt;dependencies 1234567&lt;!--web功能起步依赖--&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 编写SpringBoot的引导类 要通过SpringBoot提供的引导类起步SpringBoot才可以访问 新建Class java–&gt;新建 class com.jmp.MySpringApplication//main 方法是java程序的入口//run方法 表示运行SpringBoot的引导类main–&gt;SpringApplication.run(MyApplication.class)类注解 : @SpringBootApplication //声明该类是SpringBoot的一个引导类 编写Controller 新建Class java–&gt;新建 class com.jmp.controller.XXXController 1234567891011&gt;&gt;&gt;&gt;@Controller&gt;&gt;public class XXXController&#125;&#123;&gt;&gt;&gt;&gt; @RequestMapping(\"/sayHello\")&gt;&gt; @ResponseBody&gt;&gt; public String sayHello()&#123;&gt;&gt; return \"hello world!\";&gt;&gt; &#125;&gt;&gt;&#125;&gt;&gt; 类注解 : @Cotroller 测试访问localhost:8080/sayHello 快速入门解析Spring代码解析注解和配置解析，看书籍网络学习 SpringBoot工程热部署热部署：修改代码后不重启即可生效 在pom.xml中添加以下配置 12345&gt;&lt;dependency&gt;&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&gt;&lt;/dependency&gt;&gt; 注意：IDEA进行SpringBoot热部署失败的原因出现失败，原因可能不是部署配置问题，其原因是因为IntelliJ IDEA 默认情况下不会自动&gt;编译，需要对IEDA进行自动编译的设置，如下： （1）File–&gt;settings–&gt;Build,Ex…–&gt;Compiler–&gt; Buile project automatically （2）Shift+Ctrl+Alt+/ –&gt;Registry–&gt;![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) SpringBoot 原理分析起步依赖原理分析SpringBoot 配置文件application*.yml/yaml/properties ![1565428258216](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565428258216.png) WEB应用名/工程名配置 .properties文件中12345##WEB应用名/工程名配置 .properties文件中server.port=8080server.context-path=/demo#！！spring boot2.0之后，上下文的配置改为了server.servlet.context-pathserver.servlet.context-path=/demo application.yml配置文件很多编程语言支持yml库。yml文件以数据为核心，语法更加简洁 语法 key: value //注意，value前有空格1name: Moniac Jia 配置普通数据1name: Moniac Jia 配置对象数据、12345678910person: ##空格 name: 张三 age: 18 addr: beijingserver: port: 8081 ##工程/项目名称配置 servlet.context-path: /demp##行内对象配置（用的较少 ）person: &#123;name: zhangsan ,age: 18,addr: beijing&#125; 配置集合（List、Set）数据1234567891011121314151617##普通字符串city: - beijing - tianjian - chongqing - shanghai##对象数据student: - name: tom age: 15 addr: beijing - name: lucy age: 18 addr: tianjing### 行内对象配置（用的较少 ）city: [beingjing,tianjing,chongqing,shanghai]student: [&#123;name: tom,age: 20&#125;,&#123;tname: Anne,age: 80&#125;,&#123;name: lucy,age: 18&#125;] 配置文件与配置类的属性映射方式使用注解@Vlue映射1234567891011121314@Controllerpublic claa XXXController&#125;&#123; @Value(\"$&#123;person.age&#125;\") private int age; @Value(\"$&#123;person.name&#125;\") private String name; @RequestMapping(\"/sayHello\") @ResponseBody public String sayHello()&#123; return \"hello world!\"; &#125;&#125; 使用注解@ConfigurationProperties映射类型安全配置 12345678910111213@Controller@ConfigurationProperties（prefix= \"person\"）public claa XXXController&#125;&#123; private int age; private String name; @RequestMapping(\"/sayHello\") @ResponseBody public String sayHello()&#123; return \"hello world!\"; &#125; //需要属性的GET SET方法&#125; pom.xml配置 123456&lt;!--@ConfigurationProperties的执行器配置--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; SpringBoot与其 他技术整合SpringBoot整合MyBatis添加MyBatis起步依赖123456&lt;!--MyBatis起步依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt; 添加数据库驱动坐标123456&lt;!--MySQL连接驱动--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt; application.properties添加数据库连接信息![1565581598534](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565581598534.png) 查找–&gt;datasource.username 12345#DB Configuration:spring.datasource.diverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8spring.datasource.username=rootspring.datasource.password=root 创建实体Bean![1565598910070](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565598910070.png) 编写 Mapper1234@Mapperpublic interface UserMapper&#123; public List&lt;User&gt; queryUserList();&#125; 配置Mapper映射文件 src–&gt;main–&gt;resource–&gt;mdir mapper(floder)–&gt;UserMapper.xml![1565591511065](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565591511065.png) 在application.properties中添加MyBatis的信息12345#Sprimg集成MyBatis环境#pojo别名扫描包mybatis.type-aliases-package=com.jmp.[entity|pojo|domin|model]#mybatis映射文件mybatis.mapper.locations=classpath:mapper/*Mapper.xml 编写测试Controller123456789@Controllerpublic class UserController&#123; @Autowired private UserMapper userMapper; public List&lt;User&gt; queryUserList()&#123; List&lt;User&gt; users=userMapper.queryUserList(); return users; &#125;&#125; SpringBoot整合Junit添加Junit起步依赖(SpringBoot默认已导入 )123456&lt;!--测试的起步依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 编写测试类![1565598334648](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565598334648.png) 123456789101112@RunWith(SpringRunner.class)@SpringBootTest(class=SpringbootMybatisApplication.claa)public class Mybatistest&#123; //控制台打印信息 @Autowired private UserMapper userMapper; @Test public void test()&#123; List&lt;User&gt; users=userMapper.queryUserList(); System.out.println(users); &#125;&#125; SpringBoot整合Spring Data JPASpringBoot整合Redis添加Redis起步依赖12345&lt;!--配置Redis启动器--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 在application.properties中配置Redis的连接信息 启动Redis服务![1565599749544](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565599749544.png) ![1565599799618](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565599799618.png) 123#Redisspring.redis.host=127.0.0.1spring.redis.port=6397 注入RedisTemplate测试redis操作注解——解析lombok 标签@Data @AllArgsConstructor @@NoArgsConstructor -如何去除get，set方法。@Data注解和如何使用，lombok 在代码中我们可以只加上标签@Data 而不用get,set方法； val : 和 scala 中 val 同名, 可以在运行时确定类型; @NonNull : 注解在参数上, 如果该类参数为 null , 就会报出异常, throw new NullPointException(参数名) @Cleanup : 注释在引用变量前, 自动回收资源 默认调用 close() 方法 @Getter/@Setter : 注解在类上, 为类提供读写属性 @Getter(lazy=true) : @ToString : 注解在类上, 为类提供 toString() 方法 @EqualsAndHashCode : 注解在类上, 为类提供 equals() 和 hashCode() 方法 @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor : 注解在类上, 为类提供无参,有指定必须参数, 全参构造函数 构造函数 @AllArgsConstructor会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验， 全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。 @NoArgsConstructor无参构造函数 @RequiredArgsConstructor会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。 @Data : 注解在类上, 为类提供读写属性, 此外还提供了 equals()、hashCode()、toString() 方法 @Value : @Builder : 注解在类上, 为类提供一个内部的 Builder @SneakThrows : @Synchronized : 注解在方法上, 为方法提供同步锁 @Log : @Log4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象 @Slf4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象 @Cleanup(“dispose”) org.eclipse.swt.widgets.CoolBar bar = new CoolBar(parent, 0); @Cleanup InputStream in = new FileInputStream(args[0]); @Cleanup OutputStream out = new FileOutputStream(args[1]);关闭流 @Synchronized：对象同步 @SneakyThrows：抛出异常 1234567891011121314@Datapublic class EnergySource &#123; private String energySourceId; private String fuel; private String industrialWater; private String gas; private String naturlGas; private String steam; private String oxygenNitrogen; private String compressedAir; private String dynamicMedium;&#125; 修改Banner src/main/resource下新建 banner.txt 通过http://patorjk.com/software/taag生成字符 将网站的字符复制到banner.txt中即可日志配置 默认情况下，Spring使用Logback作为日志框架配置： 12logging.file=D:/mylog/log.loglogging.level.org.springframework.web=DEBUG 编码格式 属性文件配置 pom文件配置 数据库配置 web pages配置 开发工具配置默认编码方式为UTF-8，修改如下1spring.http.encoding.charset=编码 Thymeleaf模板引擎springBoot 不推荐使用jsp（官方文档） When running a Spring Boot application that uses an embedded(内嵌式) servlet container (and is packaged as an executable archive), there are some limitations in the JSP support.With Jetty and Tomcat, it should work if you use war packaging. An executable war will work when launched with java -jar, and will also be deployable to any standard container. JSPs are not supported when using an executable jar.Undertow does not support JSPs.Creating a custom error.jsp page does not override the default view for error handling. Custom error pages should be used instead. 脚本静态文件根据默认原则，脚本样式、图片等静态文件应放置在src/main/resource/ststic下 SpringBoot 提供自动配置 … 自动配置静态资源 类路径文件：把类路径下的/static、/public、/resources和/META-INF/resources文件夹下的静态文件直接映射为/，可以通过http://localhost:8080/来访问 webjar /META-INF/resources/webjar—&gt;/webjar/** http://localhost:8080/webjar/**来访问 静态首页支持 把静态index.html放在如下目录： calsspath：/META-INF/resources/index.html calsspath：/static/index.html calsspath：/public/index.html calsspath：/resources/index.html 当我们访问根目录http://localhost:8080/时，会直接映射 SSL配置 HTTPS是以安全为目标的HTTP通道，简单讲就是 HTTP的安全版 生成证书 配置SSL http转向https设置网站图标 icon Favicon 第一步、你要确定你网站的主题和图案所选，因为favicon文件时代表你网站的标志。制作好图片之后就可以用工具制作了，具体请搜“favicon在线制作”，上传好图片后，就可以选择生成一个32x32像素或64x64像素的favicon文件。 第二步、将你做好的favicon图片文件上传至你网站的根目录下，即www目录下。且保证命名为favicon.ico。 第三步、将这句代码 放入到你各页面的之间。 将自己的favicon.ico（文件名不能变动）文件放置在类路径根目录，类路径下的/static、/public、/resources和/META-INF/resources文件夹下都可以 1&lt;link rel=\"icon\" href=\"images/favicon.ico\" type=\"image/x-icon\" /&gt; bootstrap 响应式布局最简单的BootStrap 模板 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-cn\" xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;meta content=\"text/html\"; charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\"&gt; &lt;!--以上代码IE=Edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame1，根据官网定义X-UA-compatible 标头不区分大小写；不过，它必须显示在网页中除 title 元素和其他 meta 元素以外的所有其他元素之前。如果不是的话，它不起作用2，content的内容是IE=8，或者IE=edge等值，注意不是IE8或者直接写个edge的值，否则不起作用。--&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;!--响应式 Web 设计 - Viewportwidth：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。height：和 width 相对应，指定高度。initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。maximum-scale：允许用户缩放到的最大比例。minimum-scale：允许用户缩放到的最小比例。user-scalable：用户是否可以手动缩放。--&gt; &lt;!--上面3个标签必须是head的头三个标签--&gt; &lt;title&gt;BootStrap 模板&lt;/title&gt; &lt;link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!--HTML 5 shim and Respond.js 用来让IE8 支持HTML6 元素和媒体查询--&gt; &lt;!--如果是IE 9--&gt; &lt;script src=\"js/html5shiv.min.js\" &gt;&lt;/script&gt; &lt;script src=\"js/respond.min.js\" &gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;!--jQuery 是BootStrap脚本必须的--&gt; &lt;script src=\"jquery.min.js\"&gt;&lt;/script&gt; &lt;!--包含所有编译的插件--&gt; &lt;script src=\"bootstrap/js/bootstrap.min.js\" &gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 生产 和 开发 环境的配置切换，profile的配置*使用maven的profile切换项目各环境的参数 * 生产环境环境配置application-prod.properties： 12&gt;server.port=8889&gt; 开发环境环境配置application-dev.properties： 12&gt;server.dev=8080&gt; application.properties中 12&gt;spring.profiles.active=[dev|prod]&gt; ![1565775897542](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565775897542.png) 数据缓存 Cache在SpringBoot环境下，使用缓存技术只需在项目中导入相关的缓存技术依赖包，并在配置类中使用@EnableCaching开启缓存支持即可 Spring data JPA","categories":[],"tags":[]},{"title":"","slug":"SpringBoot Study2","date":"2019-09-12T08:37:21.022Z","updated":"2019-09-12T07:23:06.640Z","comments":true,"path":"2019/09/12/SpringBoot Study2/","link":"","permalink":"http://yoursite.com/2019/09/12/SpringBoot Study2/","excerpt":"","text":"SpringBoot 千峰Java @Controller与@RestController,@ResponseBody RestFul风格的语法* 控制类上面添加@RestController或者控制层的方法上添加@ResponseBody，代表可以使用Restful风格的语法，如果返回值为String,则返回为Restful风格的字符串，而不进行跳转 如果方法上没有@ResponseBody注解或者类上面注解是Controller，则返回的字符串为将要跳转的页面的名称 ![1567483656153](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567483656153.png) 14~18日志管理logbacklog4j19配置工程为开发模式/热部署模式21静态资源的访问22消息转化器（SpringBoot默认已配置） 只需要在类中添加消息转换器的@Bean，就会被SpringBoot自动添加到容器中。 1234567891011//定义消息转换器@Beanpublic StringHttpMessageConverter stringHttpMessageConverter()&#123; StringHttpMessageConverter converter=new StringHttpMessageConverter(Charset.forName(\"UTF-8\")); return converter;&#125;@RequestMapping(\"/test\")@ResponseBody //此注解告诉方法返回的为Restful风格的字符串，不进行页面跳转public String test()&#123; return \"Hello 你好\"；&#125; 23使用FastJson解析Json数据* SpringBoot默认配置的是Jackson 自定义Json解析工具fastjso 引入依赖 123456&lt;!--fastjson的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.15&lt;/version&gt;&lt;/dependency&gt; 配置FastJson 第一种 (1). 让启动类继承WebMvcConfigurerAdapter (2). 重写configureMessageConverters方法 (3). 注入FastJson——重写的方法内创建fastjson消息转换器 (4). 创建Fastjson的配置对象，格式化JSON对象 (5). 将配置设置给消息转换器 (6). 将转换器加入到容器的转换器集合中 服务端响应时编码/乱码解决： 1spring.http.encoding.force=true ![1567391468652](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567391468652.png) 第二种 ![1567391642911](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567391642911.png) 24自定义拦截器* 创建放置拦截器的包 12345678910111213@Configuration//声明这是一个配置public class MyInterceptor extends WebMvcConfigurerAdapter&#123; //1 继承WebMvcConfigurerAdapter //2 重写addInterceptors方法 @Override public void addInterceptors(InterceptorRegistry registry)&#123; HandlerInterceptor interceptor=new HandlerInterceptor()&#123; //重写匿名内部类 &#125; //注册拦截器并添加拦截路径 registry.addInterceptor(interceptor).addPathPatterns(\"/**\"); &#125;&#125; 25定义全局异常处理器 AOP思想 创建一个全局异常处理类，如下 1234567891011@ControllerAdvicepublic class GlobalExceptionHandler&#123; @ExceptionHandler(Exception.class) @ResponseBody public Map&lt;String,Object&gt; handlerException(Exception exception)&#123; Map&lt;String,Object&gt; map=new HashMap&lt;&gt;(); map.put(\"errorCode\",500); map,put(\"errorMsg\", exception.toString()); return map; &#125;&#125; 26异步调用 启动类添加@EnableAsynac开启异步调用 Service层中的异步方法添加@Async注解 SpringBoot 整合JSPspringBoot不建议使用jsp,使用模板引擎，如Thymeleaf,freemarker 12345678910111213141516171819202122232425262728293031323334&lt;!--SpringBoot整合jsp，需要是war工程，另外需要依赖两个包--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jsper&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--https://mvnrepository.com/artifact/javax.servlet/jstl --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--标签库 https://mvnrepository.com/artifact/taglibs/standard --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt;&lt;!--maven项目packaging为war类型时，必须要加这个插件--&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;configuration&gt;&lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 新建文件结构如下： ProjectStructure–&gt;Modules–&gt; + –&gt;Web—&gt;设置webapp为Web资源文件夹 ![1567669146224](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567669146224.png) 123#配置前缀和后缀spring.mvc.view.prefix=/WEB-INF/jspspring.mvc.view.suffix=.jsp SpringBoot整合Thymeleaf 291234&lt;ddpendency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/ddpendency&gt; 12345678910111213141516#关闭thymeleaf缓存，开发时使用，否则没有实时画面spring.thymeleaf.cache=false#检查模板是否存在，然后再呈现spring.thymeleaf.check-template-location=true#Content-Type 值spring.thymeleaf.content-type=text/html#启用MVC thymeleaf视图分辨率spring.thymeleaf.enabled=true#应该从解决方案中排除的视图名称的逗号分割列表spring.thymeleaf.excluded-view-names=#模板编码spring.thymeleaf.mode=LEGACYHTML5#在构建URL时预先查看名称的前缀spring.thymeleaf.prxfix=classpath:/template/#构建URL时后缀spring.thymeleaf.suffix=.html SpringBoot整合JdbcTemplate 3112345678910&lt;!--spring整合JdbcTemplate--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--mysql依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 连接数据库的配置： 1234spring.datasource.diver-class-name=com.mysql.jdbc.Diverspring.datasource.username=rootspring.datasource.password=rootspring.datasource.url=jdbc:mysql//localhost:3306/db1 Spring整合Mybatis 配置式 3212345678910111213141516171819202122232425262728&lt;!--spring整合mybatis--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybstis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--mysql依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--alibaba的druid数据库连接池--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.11&lt;/version&gt;&lt;/dependency&gt;&lt;!--分页插件--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt; mybatis-config.xml 12 application.yml ： 12345678910111213141516171819202122232425262728293031323334#druid数据源配置spring: datasource: name: test url: jdbc:mysql://127.0.0.1:3306/db1 username: root password: root type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.jdbc.Driver filters: stat maxActive: 20 initialSize: 1 maxWait: 60000 minIdle: 1 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: select 'x' testWhileIdle: true testOnBorrow: false poolPreparedStatements: true maxOpenPreparedStatements: 20 #mybatis配置mybatis: mapper-locations: classpath:mybatis/mapper/*.xml config-location: classpath:mybatis/mybatis-config.xml #type-aliases-package: go.jmp.pojo #分页插件的配置pagehelper: helperDialect: mysql reasonable: true supportMethodArguments: true params: count=countSql pagehelper的使用可参考官方文档启动类添加包扫描注解 12@SpringBootApplication(scanBasePackages=\"go.jmp\")@MapperScan(\"go.jmp.mapper\") Spring整合Mybatis 注解式 33mybatis,mysql依赖引入 1234public interface UsersMapper&#123; @Select(\"select * from users where name=#&#123;name&#125;\") Users findUserByName(@Param(\"name\")String name);&#125; 区分多数据源分包，分类管理 mybatis,mysql依赖引入 连接数据库的配置： 12345678910#db1 数据库配置spring.datasource.db1.diver-class-name=com.mysql.jdbc.Diverspring.datasource.db1.username=rootspring.datasource.db1.password=rootspring.datasource.db1.url=jdbc:mysql//localhost:3306/db1#db2 数据库配置spring.datasource.db2.diver-class-name=com.mysql.jdbc.Diverspring.datasource.db2.username=rootspring.datasource.db2.password=rootspring.datasource.db2.url=jdbc:mysql//localhost:3306/db2 创建DataSource管理类，@Primary 指定默认的数据源，指定Mapper扫描包，并注入Spring容器 Mapper类指定数据源 1234@Qualifier(\"db1SqlSessionFactory\")public interface UserMapper&#123; ....&#125; 1234@Qualifier(\"db2SqlSessionFactory\")public interface UserMapper&#123; ....&#125; SpringBoot事务管理 36Service层的方法上添加事务管理注解 @Transactional SpringBoot整合Email12345&lt;!--邮件依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 全局配置文件： 1234567#JavaMailSender 邮件发送的配置 38spring.mail.host=smtp.qq.com #[smtp.163.com]spring.mail.username=kyrd@qq.comspring.mail.password=???? #授权码spring.mail.properties.mail.smtp.starttls.enable=truespring.mail.properties.mail.smtp.starttls.required=true#qq邮箱-&gt;设置-&gt;账户-&gt;POP3/SMTP服务：开启服务后会获取QQ授权码 出现认证失败的解决方案：因为JDK1.8中jre/lib/security中两个JAR包替换的缘故。 将下载后的local_policy.jar和US_export_policy.jar替换到JDK1.8的jre/lib/security文件夹即可 简单邮件的发送–EmailConfig 12345@Datapublic class EmailConfig &#123; @Value(\"$&#123;spring.mail.username&#125;\") private String emailFrom;&#125; 简单邮件的发送–service实现类 123456789101112131415161718@Servicepublic class EmailServiceImpl implements EmailService &#123; @Autowired private EmailConfig emailConfig; @Autowired private JavaMailSender mailSender; @Override public void sendSimpleMail(String sendTo,String title,String content)&#123; //简单邮件的发送 SimpleMailMessage message=new SimpleMailMailMessage(); message.setFrom(emailConfig.getEmailFrom); message.setTo(sendTo); message.setSubject(title); message.setText(content); mailSender.send(message); &#125;&#125; 简单邮件的发送–controller 12345678910@Contrllerpublic class EmailController&#123; @Autowired private EmailService emailService; @RequestMapping(/Simple) public String sendSimpleEmail()&#123; emailService.sendSimpleMail(\"kyrd@qq.com\",\"你好\"，\"很高兴认识你\"); return \"success\"; &#125;&#125; 实现发送带附件的邮件 39 service 12345678910111213141516//发送带附件的邮件@Overridepublic void sendAttachmentMail(String sendTo,String title,String content,File file )&#123; MimeMessage msg=mailSender.createMimeMessage(); try&#123; MimeMessageHelper helpr=new MimeMessageHelper(msg,true); helper.setFrom(emailConfig.getEmailFrom()); helper.setTo(sendTo); helper.setSubject(title); helper.setText(content); FileSystemResource r=new FileSystemResource(file); helper.addAttachment(\"附件\",r); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;&#125; 实现发送模板邮件 40添加依赖： 12345678910&lt;!--邮件依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--freemarker---&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt; service 12345678public interface EmailService&#123; //发送简单的邮件 void sendSimpleMail(String sendTo,String title,String content); //发送带附件的邮件 void sendAttachmentMail(String sendTo,String title,String content,File file ); //发送模板邮件 void sendTempalateMail(String sendTo,String title,String info);&#125; 1234567891011121314151617181920212223@Autowiredprivate FreeMarkerConfigurer freeMarkerConfig;//发送模板邮件@Overridepublic void sendTemplateMail(String sendTo,String title,String info)&#123; MimeMessage msg=mailSender.creareMimeMessage(); try&#123; MimeMessageHelper helpler=new MimeMessageHelper(msg,true); helper.setFrom(emailConfig.getEmailFrom()); helper.setTo(sendTo); helper.setSubject(title); //封装模板需要的数据 Map&lt;String，Object&gt; model=new HashMap&lt;&gt;(); model.put(\"username\",\"小红\"); //得到模板 Tempalte tempalte =freeMarkerConfig.getConfiguration().getTemplate(info); String html = FreeMarkerTemplateUntils.processTempalteIntoString(tempalte,model); helper.setText(html,true); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; mailSender.send(msg);&#125; controller 12345678910@Contrllerpublic class EmailController&#123; @Autowired private EmailService emailService; @RequestMapping(/Simple) public String sendSimpleEmail()&#123; emailService.sendTempalateMail(\"kyrd@qq.com\",\"你好\"，info.html); return \"success\"; &#125;&#125; info.html 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;模板邮件发送测试&lt;/title&gt; &lt;/head&gt; &lt;body&gt; $&#123;username&#125; &lt;/body&gt;&lt;/html&gt; 实现文件上传 41 依赖 12345678910&lt;!--spring boot web支持--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--thymeleaf模板依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; properties 1234#上传单个文件大小的限制multipart.maxFileSize=500Mb#上传的所有文件的总大小限制multipart.maxRequestSize=500Mb html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;hr/&gt; &lt;form method=\"POST\" enctype=\"multipart/form-data\" action=\"/upload\"&gt; &lt;p&gt; 文件&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=\"submit\" value=\"上传\"/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; ![1567763803912](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567763803912.png) ![1567763819481](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567763819481.png) 文件批量上传 html 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;hr/&gt; &lt;form method=\"POST\" enctype=\"multipart/form-data\" action=\"/upload/batch\"&gt; &lt;p&gt; 文件1:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; 文件2:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; 文件3:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=\"submit\" value=\"上传\"/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Controller ![1567815310149](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815310149.png) ![1567815287069](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815287069.png) ![1567815243675](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815243675.png) Neo4j 图形数据库12345&lt;dependency&gt;&lt;groupId&gt; &lt;/groupId&gt;&lt;/dependency&gt;","categories":[],"tags":[]},{"title":"","slug":"自建Blog","date":"2019-08-07T08:46:30.870Z","updated":"2019-09-25T00:53:27.249Z","comments":true,"path":"2019/08/07/自建Blog/","link":"","permalink":"http://yoursite.com/2019/08/07/自建Blog/","excerpt":"","text":"hexo 博客框架 自建静态博客 CodeSheep参考视频 环境准备 安装 GIT 安装 node.js:node,js download 检查是否安装成功 由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm* 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装 1hexo cnpm install -g hexo-cli ![1565084789098](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565084789098.png) 搭建启动部署博客 新建一个放置博客文件的专属文件夹，在命令行下将路径切换到文件夹所在路径 博客初始化 命令行输入 hexo init 【mac os 输入 sudo hexo init】 启动 hexo s ![1565144387885](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565144387885.png) 新建一篇文章 hexo n “我的第一篇博客文章.md” github 新建一个仓库 用户名.github.io jmp.github.io 安装cnpm插件 1cnpm install --save hexo-deployer-git 修改_config.yml文件，在文件底部这样修改![1565168436408](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565168436408.png) 123type: gitrepo: https://github.com/870727741/870727741.github.io.gitbranch: master 部署到远端 hexo d 博文用Markdown写，后缀名为.md，放在post文件夹里。每次写完，hexo g -d生成部署 更换blog主题 路径切换到blog文件夹下面 1&gt;git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置文件 blog/_config.ymlstart _config.yml 1234theme: yilia&gt;hexo c &gt;hexo g &gt;hexo s 总结注意事项 git,github,repositories所有用户名/账户名一致一一致！ 每行命令失败先检查当前行是否敲错，根据错误提示检查敲过的命令是否生效","categories":[],"tags":[]}]}