{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"资源链接","date":"2019-09-12T08:32:36.669Z","updated":"2019-08-08T03:15:02.951Z","comments":true,"path":"2019/09/12/资源链接/","link":"","permalink":"http://yoursite.com/2019/09/12/资源链接/","excerpt":"","text":"链接：https://pan.baidu.com/s/1h8sRYgamcIJmKWM32SQ3OQ提取码：pymx视觉SLAM链接：https://pan.baidu.com/s/1JYb6J-RJ_vGK49Wa6-s5qw提取码：u9z4清华大学，电子，软件，编译，计算机链接：https://pan.baidu.com/s/1FUFurR9***r8o5rnvMdTTA提取码：i02rPython3入门机器学习 经典算法与应用链接：https://pan.baidu.com/s/1_0WRuPex3-KuI6oNBaJNdg提取码：znil02.朱伟英语链接：https://pan.baidu.com/s/1AyCskOUYfvKMv7KyNuH45g提取码：wbw6南京大学计算机课程链接：https://pan.baidu.com/s/1FGmfgYoL5-RmdLSyV1OD9A提取码：wijm南开 经济英语 17讲链接：https://pan.baidu.com/s/1IlEJyENmtSl-fzgulCnhaw提取码：jb8kC语言基础知识链接：https://pan.baidu.com/s/1MVZ55n9t9LdRAnw1PQe2zw提取码：rawzC语言进阶链接：https://pan.baidu.com/s/1a-hClTJ4zSRQ5KG***9BaQ提取码：sfuf浙大，英语、链接：https://pan.baidu.com/s/11VKzhLroXJ_7W7QVfJ0hmQ提取码：7rl7 《第一行代码 Java》链接：https://pan.baidu.com/s/1jvEGp1o9gGVX7PnAT7JQqA提取码：lq90IDEA 2018 破解链接：https://pan.baidu.com/s/1zhKiwUNjdITCRUlQkRP26w提取码：mdsqOpenCV+TensorFlow 入门人工智能图像处理链接：https://pan.baidu.com/s/1hCZnzXsJxnG8q1VWuaCAtQ提取码：r8b5数学建模资料(5块钱买的）：链接：https://pan.baidu.com/s/1K3oy5eQo431X1Jc8d0PLQQ提取码：6oon链接：https://pan.baidu.com/s/1yfFKIwdlyYdrEEIznGlLzQ提取码：bnqxc++语言的opencv链接：https://pan.baidu.com/s/1ZZ1Cu13sE7huNInLaGPDYw提取码：7iovjava语言的opencv链接：https://pan.baidu.com/s/1fWrQIHx_3qKRNB-_1GmSEw提取码：k59apython语言的opencv链接：https://pan.baidu.com/s/1jafbIwo8zmnrclFuKWS-SQ提取码：yd59OPENCV函数手册(带目录)链接：https://pan.baidu.com/s/1wuU7IQuJBP6PoQiCcdt3tA提取码：9lqt","categories":[],"tags":[]},{"title":"","slug":"我的书架","date":"2019-09-12T08:32:36.668Z","updated":"2019-08-08T02:01:13.608Z","comments":true,"path":"2019/09/12/我的书架/","link":"","permalink":"http://yoursite.com/2019/09/12/我的书架/","excerpt":"","text":"数据结构 SQL应用重构 涂抹Oracle Java性能优化 敏捷软件开发","categories":[],"tags":[]},{"title":"","slug":"库存数量","date":"2019-09-12T08:32:36.668Z","updated":"2019-08-16T01:38:08.374Z","comments":true,"path":"2019/09/12/库存数量/","link":"","permalink":"http://yoursite.com/2019/09/12/库存数量/","excerpt":"","text":"27 抽 9 卷 11 洗衣液 5 建群Q群 邀请人奖励 开学新生好物推荐 上学期间好物推荐 寒暑假好物推荐 通用好物推荐 代理发展计划地推计划 打印群聊/微信二维码，收款二维码 地推好物： 便宜好用适合学生的生活日用品零食","categories":[],"tags":[]},{"title":"","slug":"关于中老年人就业问题的研究与解决方案","date":"2019-09-12T08:32:36.666Z","updated":"2019-09-02T09:48:31.654Z","comments":true,"path":"2019/09/12/关于中老年人就业问题的研究与解决方案/","link":"","permalink":"http://yoursite.com/2019/09/12/关于中老年人就业问题的研究与解决方案/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Typora特点","date":"2019-09-12T08:32:36.665Z","updated":"2019-09-06T00:39:47.011Z","comments":true,"path":"2019/09/12/Typora特点/","link":"","permalink":"http://yoursite.com/2019/09/12/Typora特点/","excerpt":"","text":"打开文件夹下的文件后，该文件夹及其子文件夹下的所有文件都会出现在列表中 显示文件的创建时间 创建文件时询问创建文件的文件夹 应用内可以搜索文件资源 列表可以树视图显示 也可以以文件模式显示 文档列表可隐藏/显示 ctrl+ ↑/↓跳转到开头/末尾 windows+; 选择表情Hi~ o(￣▽￣)ブ/_ \\（；´д｀）ゞ","categories":[],"tags":[]},{"title":"","slug":"MD练习","date":"2019-09-12T08:32:36.663Z","updated":"2019-08-28T06:07:09.102Z","comments":true,"path":"2019/09/12/MD练习/","link":"","permalink":"http://yoursite.com/2019/09/12/MD练习/","excerpt":"","text":"0MD注释练习 上标练习^1 title 练习 二级标题三级标题四级标题五级标题六级标题 键盘按钮效果语法 ALT+shift 引用文本 删除文本 6.文本 加粗文本 未完成 已完成","categories":[],"tags":[]},{"title":"","slug":"应用开发工具使用/开发工具设置","date":"2019-09-12T08:32:36.660Z","updated":"2019-09-03T02:21:14.231Z","comments":true,"path":"2019/09/12/应用开发工具使用/开发工具设置/","link":"","permalink":"http://yoursite.com/2019/09/12/应用开发工具使用/开发工具设置/","excerpt":"","text":"IntellijJ IDEAIDEA创建JAVA Class时自动生成头部文档注释 File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Files-&gt;Class修改模板为： 1234567891011&gt;#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package &gt;$&#123;PACKAGE_NAME&#125;;#end&gt;&gt;/** &gt;* $&#123;NAME&#125;.java&gt; * User: Monica Jia&gt; * Date: $&#123;DATE&#125; Time: $&#123;TIME&#125;&gt; * Description: &gt; */&gt;public class $&#123;NAME&#125; &#123;&gt;&#125;&gt; 文档注释修改 Live Templates![1565851311102](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565851311102.png) 快捷键代码类 快捷键 说明 Alt+C 代码提示（自改原ctrl+shift+space） Ctrl+Alt+T 对选中代码增加包围代码，例如try-catch，if之类 Alt+Insert 对类增加getter/setter，toString之类的类级基础方法 Shift+F6 可以重命名你的类、方法、变量等等，而且这个重命名等 Ctrl+Alt+L 代码格式化 Ctr + Shift + u 大小写转换 Ctrl+O 重写父类方法 Ctrl+W 选中代码文本 Ctrl+P 方法参数提示。 Ctrl+Alt+O 优化导入的类和包 Ctrl+/或Ctrl+Shift+/ 注释（//或者/**/） Ctrl+Alt+鼠标左键 或 Ctrl+Alt+F3 打开接口的实现类 alt + enter 代码提示 CTRL+[shift] + 小键盘 [-/+ ] 折叠/展开[全部/当前]代码块 编辑类 快捷键 说明 Ctrl+D/Ctrl+Y 复制当前行/删除当前行 CTRL+SHIFT+UP/DOWN 移动行 Ctrl+Shift+Alt +鼠标左键可以一行一行的选 Alt+鼠标左键向下拉 按住鼠标滚轮向下拉 列编辑 Alt+L 最后一次编辑的地方原（Ctrl+Shift+Backspace） Ctrl+shift+F12 编辑区最大屏 文件查找 快捷键 说明 Ctrl+F12 查看类结构 Alt+F7 查找变量，方法的引用位置 Ctrl+E 查找最近编辑的文件，以及项目中的TODO等项目信息 Ctrl+N* 输入关键字查找文件 Ctrl+Shift+N 按文件名称 查找文件 Ctrl+Shift+F7 高亮所有选中文本 Ctrl+Shift+F 查找文本 Ctrl+Shift+R 替换文本 Shift+Shift 查找所有文件 Alt+←/→ 切换文件 Ctrl+E 最近文件跳转 ctrl + shift + 空格 跳转回上次编辑的地方 Ctrl + F11 书签跳转BookMarks,这个快捷键对于阅读别人的代码很有用 ctrl +shift + c 复制完整文件路径 ctrl +shift + v 将你最近复制的内容都放在剪切板上, 因此你可以做批量复制 提示 快捷键 说明 Ctrl+Q View | Quick Documentation 视图 查看代码文档 Ctrl+P View | Parameter Info 视图 参数信息 Ctrl+B Navigate | Declaration 导航 查看变量的声明，再次点击可以查看变量的调用 自动补全 快捷键 说明 Alt+J 提示所有智能补全代码 sout system.out itar for循环 psvm main方法补全","categories":[],"tags":[]},{"title":"","slug":"应用开发工具使用/Intelij IDEA 学习","date":"2019-09-12T08:32:36.660Z","updated":"2019-08-22T09:55:01.053Z","comments":true,"path":"2019/09/12/应用开发工具使用/Intelij IDEA 学习/","link":"","permalink":"http://yoursite.com/2019/09/12/应用开发工具使用/Intelij IDEA 学习/","excerpt":"","text":"InteliJ IDEA 常用习惯/基础设置/全局设置全局设置进入方式 configure –&gt; Setting File –&gt; Other Setting –&gt;Default Setting File–&gt; setting 设置只对当前项目有效 https://www.bilibili.com/video/av21735428?p=4 ![1565318485837](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318485837.png) ![1565318403277](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318403277.png) InteliJ IDEA 配置 JDK 环境 project Default –&gt; project Structure ![1565318818877](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318818877.png) ![1565318973661](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565318973661.png) 创建文件![1565319924004](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565319924004.png) Package Name and File Name can set at the same time main函数：psvm 打印：sout 配置 InteliJ IDEA JVM参数 8 G以上的电脑配置后显示速度会大大提高 help –&gt;Edit Custom VM Options… 123456789101112 # custom IntelliJ IDEA VM options-Xms128m ## 启动占用的最小内存 --&gt;1024m-Xmx750m ## 启动占用的最大内存 --&gt;2048m-XX:ReservedCodeCacheSize=240m ##--&gt;500m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow ![1565319924004](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\20190418110055800.png) 为Java Web 工程添加第三方依赖![1565333236796](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333236796.png) ![1565333448451](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333448451.png) ![1565333761841](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333761841.png) ![1565333845252](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565333845252.png) Maven 配置![1565336174837](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565336174837.png) ![1565336314404](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565336314404.png) ![1565338489641](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565338489641.png) artifactId 命名建议使用下划线 Java Web 骨架 ![1565339083664](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339083664.png) Java SE 骨架 ![1565349372334](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565349372334.png) 文件夹定义![1565339462018](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339462018.png)![1565339476017](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565339476017.png) Maven Tomcat 7 插件待填充 创建聚合工程骨架 ![1565341314120](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565341314120.png) 配置忽略文件![1565347814254](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565347814254.png) ![1565349228422](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565349228422.png) IntelliJ IDE 右侧功能条![1566467596857](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566467596857.png) IDEA创建JAVA Class时自动生成头部文档注释 File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Files-&gt;Class修改模板为： 1234567891011&gt; #if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package &gt;$&#123;PACKAGE_NAME&#125;;#end&gt; &gt; /**&gt; * $&#123;NAME&#125;.java&gt; * User: Monica Jia&gt; * Date: $&#123;DATE&#125; Time: $&#123;TIME&#125;&gt; * Description: &gt; */&gt; public class $&#123;NAME&#125; &#123;&gt; &#125;&gt; 文档注释修改 Live Templates![1565851311102](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565851311102.png) 快捷键代码类 快捷键 说明 Alt+C 代码提示（自改原ctrl+shift+space） Ctrl+Alt+T 对选中代码增加包围代码，例如try-catch，if之类 Alt+Insert 对类增加getter/setter，toString之类的类级基础方法 Shift+F6 可以重命名你的类、方法、变量等等，而且这个重命名等 Ctrl+Alt+L 代码格式化 Ctr + Shift + u 大小写转换 Ctrl+O 重写父类方法 Ctrl+W 选中代码文本 Ctrl+P 方法参数提示。 Ctrl+Alt+O 优化导入的类和包 Ctrl+/或Ctrl+Shift+/ 注释（//或者/**/） Ctrl+Alt+鼠标左键 或 Ctrl+Alt+F3 打开接口的实现类 alt + enter 代码提示 CTRL+[shift] + 小键盘 [-/+ ] 折叠/展开[全部/当前]代码块 编辑类 快捷键 说明 Ctrl+D/Ctrl+Y 复制当前行/删除当前行 CTRL+SHIFT+UP/DOWN 移动行 Ctrl+Shift+Alt +鼠标左键可以一行一行的选 Alt+鼠标左键向下拉 按住鼠标滚轮向下拉 列编辑 Alt+L 最后一次编辑的地方原（Ctrl+Shift+Backspace） Ctrl+shift+F12 编辑区最大屏 文件查找 快捷键 说明 Ctrl+F12 查看类结构 Alt+F7 查找变量，方法的引用位置 Ctrl+E 查找最近编辑的文件，以及项目中的TODO等项目信息 8Ctrl+N* 输入关键字查找文件 Ctrl+Shift+N 按文件名称 查找文件 Ctrl+Shift+F7 高亮所有选中文本 Ctrl+Shift+F 查找文本 Ctrl+Shift+R 替换文本 Shift+Shift 查找所有文件 Alt+←/→ 切换文件 Ctrl+E 最近文件跳转 ctrl + shift + 空格 跳转回上次编辑的地方 Ctrl + F11 书签跳转BookMarks,这个快捷键对于阅读别人的代码很有用 ctrl +shift + c 复制完整文件路径 ctrl +shift + v 将你最近复制的内容都放在剪切板上, 因此你可以做批量复制 提示 快捷键 说明 Ctrl+Q View | Quick Documentation 视图 查看代码文档 Ctrl+P View | Parameter Info 视图 参数信息 Ctrl+B Navigate | Declaration 导航 查看变量的声明，再次点击可以查看变量的调用 自动补全 快捷键 说明 Alt+J 提示所有智能补全代码 sout system.out itar for循环 psvm main方法补全","categories":[],"tags":[]},{"title":"","slug":"新闻/2019精选","date":"2019-09-12T08:32:36.657Z","updated":"2019-08-13T06:35:49.964Z","comments":true,"path":"2019/09/12/新闻/2019精选/","link":"","permalink":"http://yoursite.com/2019/09/12/新闻/2019精选/","excerpt":"","text":"2019-5吴谢宇弑母等：为什么大家都愿意相信“受害者有罪论”？2019-05-27· 今日评论 《今日评论》撰稿：颜欢 据新京报4月25日报道，涉嫌弑母的北大学子吴谢宇于21日在重庆机场送别友人时被重庆警方抓捕落网。2015年 7月11日，吴谢宇母亲谢天琴遇害。2016年2月14日，谢天琴被发现死在一教工宿舍，其儿子吴谢宇有重大作案嫌疑。 被捕后对于作案原因及细节吴谢宇都拒绝交待，媒体很多信息都是来源于身边人对他的描述，在逃亡的三年里，吴谢宇在酒吧做“男模”的情况，为何花费十几万购买彩票，及多次出入色情场所，和母亲的关系等等，媒体都是各执一词，但是吴谢宇故意杀人罪是确定的。 媒体报道的罗生门也导致了网上评论的泛滥，虽然吴谢宇弑母案件证据确凿并且嫌疑人已经承认，但是并不能阻挡大部分网友开启“受害者有罪论”，纷纷开始批判吴谢宇母亲，“她是否对吴谢宇过于严格，导致他出现逆反心理？”“犯罪是因为受到母亲的压迫与摧残”，甚至是“这种母亲被杀活该”这样的话都能得到很多认同。但是这种理论本身就是错的，弑母是一种突破道德底线的行为，是极端的人干出的极端事，把它归因于母亲的严格要求，是一种逻辑谬误。评论者带着先入为主的偏见，就很容易陷入这种假性因果的谬误中。 目前中国的舆论环境下，每当有人受害的时候，很多人都倾向于给受害者找一个之所以被害的原因，在网上被称作“受害者有罪论”，在认知心理学上被称作：“Believe in Just World model ——公正世界理论。”它的含义是：有些人潜意识里认为恶性事件不可能随机发生，不可能无原因，或者说原因不可能不充分。任何恶性事件的发生都一定是有理由的。因为只有这样世界才是公正世界，才是可以被这些人理解认可的世界。 潜意识中这些人不会想到违反这个理论，导致他们对于事件的认知出现偏差。于是，出现了最常见的这类“受害者有罪论”，比如:被性侵的女孩是因为自己穿的太暴露，遇到这样的事是活该。这个人之所以被害都是“咎由自取”，不作就不会死。更有甚者，在某女孩帮助别人却被被帮助人侵害的新闻中，有人竟然给女孩冠上“圣母婊”的头衔后大肆辱骂。嘲笑其“缺乏社会经验”，“想当圣母反被害”。还有人大肆宣扬“一个巴掌拍不响”“苍蝇不叮无缝蛋”这些看似公正全面，实际上荒谬绝伦的理论。 这是一种只重视主观认知而忽略客观的心理机制，是一种惰性逻辑，主要目的在于通过谴责受害者让自己安心。通过只要怎样就不会怎样的句式或者只要自己不怎样，就不会怎样的句式进行自我洗脑，消费别人，安慰自己。 虽然人类的喜悲不能相通，但是我们还有宽容、慈悲的美德，不要再成为受害者精神上的施暴者。","categories":[],"tags":[]},{"title":"","slug":"新闻/2019年新闻纪实","date":"2019-09-12T08:32:36.656Z","updated":"2019-08-14T13:21:52.901Z","comments":true,"path":"2019/09/12/新闻/2019年新闻纪实/","link":"","permalink":"http://yoursite.com/2019/09/12/新闻/2019年新闻纪实/","excerpt":"","text":"8月 韩国 日本 贸易出口互拉黑名单 香港暴乱 深圳大批武警聚集 香港机场取消航班 利奇马台风 5G时代的到来 电影哪吒观影人次破亿 吴谢宇弑母案 北大补录退档考生 猪肉价格的暴跌与暴涨 中美贸易战 日韩贸易战 股市跌宕 明星解约","categories":[],"tags":[]},{"title":"","slug":"生活/杂谈/好用小应用","date":"2019-09-12T08:32:36.653Z","updated":"2019-08-29T00:32:06.982Z","comments":true,"path":"2019/09/12/生活/杂谈/好用小应用/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/杂谈/好用小应用/","excerpt":"","text":"Android APP 美剧控消息 BiliBili keep 每日英语听力 幕布 人人视频 jmp12387654 Windows 小智桌面 小黄条 日程工具 PotPlay 视频播放器 Typora MarkDown编辑器 内网通 WPS 微信 QQ 管家 百度网盘 有道词典 办公类 JDK IDE ：eclipse IntelliJ IDEA tomcat maven git svn Android shdio Hbuilder sublime mysql navicat for mysql Oracle VMware Visual Pardigm","categories":[],"tags":[]},{"title":"","slug":"生活/胡言乱语","date":"2019-09-12T08:32:36.650Z","updated":"2019-09-05T03:38:56.685Z","comments":true,"path":"2019/09/12/生活/胡言乱语/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/胡言乱语/","excerpt":"","text":"人生的磨难很多的，所以我们不可对于每一件轻微的伤害都过于敏感。在生活的磨难面前，精神上的坚强和无动于衷使我们抵抗罪恶和人生意外的最好武器。 职场环境，好奇心，自我定位，思考，运气和机会运气 第一份工作的选择很重要。不要想着我没有选择的机会，有份工作就不错了，现实情况是进了一行，想出来很难，想转行更难。这时候关于找工作：不要自乱阵脚，多找老师朋友及过来人：选对行业，选对职位。 禁止一份简历海投。简历不是投得越多越好，你要的是有效入职。所以在简历这方面一定要有针对性，展示你有解决问题的能力，和你有解决过问题的案例！这是真正让HR用你的地方。 个人形象要好。不要穿得好像圣诞树啊，衣服颜色不要超过3种，简单大方为主，一般建议的颜色就是黑. 白. 灰等，个人形象稳重，这样领导才敢用你和放心把工作交给你。 永远不要迟到早退。所有事项必须永远提前，比如上班提前15分钟坐在工位上，开会提前5分钟坐在会议室里，约了同事谈需求提前10分钟到场。有助于树立守时可靠的工作形象。 比上级要求的多做一点。上级要你提问题，你起码要附带3个及以上的解决方案，千万不要只提问题，就什么也不做了，领导更看重能够发现问题并解决问题的好员工。对于上级交待的工作一定要做好，而且要超出他们的期望，这样才会在以后的工作中继续委以重任。 站在上级的角度思考问题。对于自己完成的工作，最好跳出来站在上级或者上上级的角度重新审视一下，如果连自己都不满意，那就重新做。 不要只埋头苦干，无视他人存在。一天8小时，如果你一直工作，一句话也不说，很容易让同事们觉得你不合群，又难以接近，适当与同事们互动，团结协作，工作会更事半功倍。 不要斤斤计较，只做自己本职工作。领导又交待不是你“分内”的工作？不要拒绝，多锻炼自己挺好的，其实工作的前几年就是自己探索的时候，多学习各方面的技能，最终找到最适合自己发展的！所以，多做一些本职之外的工作，有助于全面发展。 认清你对谁负责。就是要知道谁决定你的绩效和晋升， 职场中跨级指挥的领导太多了，如果你的主管. 经理意见不合？你要听谁？当然是听主管的啦，因为他是你的直接上级，决定你的绩效。 一天的工作要有计划。工作不要盲目做，早上来到工位上，先想想今天要做什么？列一个清单，一项项去完成，如果事情很多，多到你一天完不成，那么就分轻重缓急，先做着急的，重要的。 习惯于做工作总结。日总结. 周总结. 月总结，年度总结，都要认真思考，复盘自己的工作，想想自己的工作存在的问题，及改进的方法，及下一步的工作计划。有反馈才有调整，根据目标去执行。这样你才能快速成长。 不当办公室小透明。有很多很多人觉得只要努力工作就好，你的老板. 领导. 上级都会看到，其实是你想多了。工作完成得好，你要让他们知道，适当的“邀功”才会让别人看到你。如果你为了跟进某一个需求，每天加班，邮件抄送他们，工作汇报要提到，完成以后要告知。所以，不当小透明，职场中是一样需要找存在感的。 微信头像不要总是换，还有工作群不要发语音。频繁换头像很容易让别人以为你心思不在工作上，而不换头像是为了让领导快速找到你！不能发语音，是因为你还不是领导，因为发语音是领导的权利，在你是员工的群里，接收到领导的消息或语音，回复：好的，或者收到就可以。 建立良好的人际关系。适当的时候请同事们喝喝茶，吃吃点心，不要每次都不请，或者你总是被请的那一个，时间长了，你在同事眼里就是抠门又不合群的人，也许就因为这样，你有可能在某一刻被当成炮灰排挤出去。 不要横向比较薪水。不要四处打听别人的薪水，也不要在办公区域讨论。薪水都是保密的，要知道自己的薪水是不是合理，就设想一下：如果我现在找工作能不能找到比这个薪水高的， 或者更喜欢的，没有找不到，那么你现在的薪水就是合理的。 学会借力。如果你的工作需要跨部门交流，有些人情，资源，你出面不好使的时候，这时候需要你的上级或上上级出面，及时提出来，问题会更快得到解决。不要硬抗，你觉得你有能力解决，然而并没有，你的领导知道会更生气：批评你没有及时反馈给他，导致本来简单的工作拖到现在。 持续学习。你不会想在一家公司待一辈子的，即使你觉得目前不错，也不要忘记了学习，本部门的工作尽可能的掌握熟悉，其他部门的工作也可以多少了解些，业余时间横向纵向的领域多学习，为你以后的工作多争取一份机遇。 不要把负面情绪带到工作里。受委屈了，挨批评了也别在办公室里哭，也不要跟同事拍桌子，更不要跟领导大吵大闹，因为你这样同事看见只会把你当作茶余饭后的笑话来说。优雅. 平静的处理问题，才是情商高的表现。 职场不做传话筒。所有好的不好的，到自己这儿就结束吧。没准这些话传到某领导的耳朵里，说你是起头人，那么你的形象还有你的前途可能就没了。 关于离职有3小点： （1）离职申请最好在周三. 周四提出比较好。这样你可能周五前可以得到答复。如果你等到周五，那么周六. 周日那些上级忙自己的事情，可能忘记了，周一上班第一天会会有很多总结要交，还有很多下周计划要做，你的离职申请说了等于白说。 （2）提前一个月报备离职，那么在你离开之前这一个月，尽可能做好自己所有的工作，还有交接。不要觉得走了，工作爱死不死，跟你没关系。不管在哪，好聚取散都是最漂亮的样子。之前公司有一同事离职，就什么也不管不问，走了我们还在给他擦屁股，这样就不好啦。 （3）离职前请同事们吃顿饭吧！不仅是告别，还为了保存你的人脉，没准下一份工作或者在你需要的时候，他们能帮助到你。多个朋友，多条路。一定没错哒！","categories":[],"tags":[]},{"title":"","slug":"生活/生活经验","date":"2019-09-12T08:32:36.649Z","updated":"2019-09-02T09:18:00.174Z","comments":true,"path":"2019/09/12/生活/生活经验/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/生活经验/","excerpt":"","text":"不请假办理事业业务 滴滴司机 大学学生 附近无业/清闲工作人员","categories":[],"tags":[]},{"title":"","slug":"生活/父母计划","date":"2019-09-12T08:32:36.648Z","updated":"2019-09-03T01:14:24.973Z","comments":true,"path":"2019/09/12/生活/父母计划/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/父母计划/","excerpt":"","text":"缴纳医保 买房攒钱 老家房子出租 农村淘宝 农村电商一定要熟悉农村、农业、了解农民需求，产品要有特色，你不懂三农，你就很难开展。","categories":[],"tags":[]},{"title":"","slug":"生活/炖汤菜谱","date":"2019-09-12T08:32:36.647Z","updated":"2019-08-30T01:07:41.310Z","comments":true,"path":"2019/09/12/生活/炖汤菜谱/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/炖汤菜谱/","excerpt":"","text":"鸡汤材料：鸡块，姜片，大葱段，红枣，枸杞，（香菇，虫草花，山药） 步骤 鸡块，葱段，姜片，冷水下锅焯水去腥和杂质 捞出鸡块，冷水洗净 鸡肉捞出放入炖锅，七分水（矿泉水），葱段，姜片红枣，枸杞 熟了之后放盐，焖一会 营养菌菇汤 鱼汤","categories":[],"tags":[]},{"title":"","slug":"生活/未命名","date":"2019-09-12T08:32:36.646Z","updated":"2019-09-02T08:08:59.302Z","comments":true,"path":"2019/09/12/生活/未命名/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/未命名/","excerpt":"","text":"心情不好 听音乐 抄文章 跑步运 徒步行 想想父母 列物品清单 写人生计划 最近计划","categories":[],"tags":[]},{"title":"","slug":"生活/我的计划","date":"2019-09-12T08:32:36.645Z","updated":"2019-09-04T01:14:11.032Z","comments":true,"path":"2019/09/12/生活/我的计划/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/我的计划/","excerpt":"","text":"周一 周二 周三 周四 周五 周六 周日 1(9🈷） 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 1(10🈷） 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1(11🈷) 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 1(12🈷) 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1(元🈷) 2 3 4 5 英语 恋恋有词 30单元每周3~5单元 每周两篇阅读理解 每周背一篇写作 数学 数据结构 离散 政治","categories":[],"tags":[]},{"title":"","slug":"生活/MID","date":"2019-09-12T08:32:36.644Z","updated":"2019-08-08T02:07:34.764Z","comments":true,"path":"2019/09/12/生活/MID/","link":"","permalink":"http://yoursite.com/2019/09/12/生活/MID/","excerpt":"","text":"12306 JMP726102472 MID jmp72* 河南省大中专就业信息 kyrd@qq.com MID 123456abc 学信网https://my.chsi.com.cn/archive/index.jsp 726* 870* loveme123* vivo 177* j870 8535* 08love 835004319 0.2/3 601500955 0.1 github 870727741 j72 图灵机器人 17796694595 同上 码云 ky* j7 tAO l*.1 环信 kyrd@qq.com j7 bilibili ky* 72*","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-6","date":"2019-09-12T08:32:36.641Z","updated":"2019-09-06T01:51:02.369Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-6/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-6/","excerpt":"","text":"前端框架 基础框架 layui v2.4.5 基础框架 easyweb v3.1.1 树形框架 zTree v3.5.28 其他框架 jQuery、layui周边框架 主要特色 易上手 / 简约 / 依赖少 后台框架 核心框架 Spring Boot 视图渲染 Spring MVC、Beetl 持久层 MyBatis、Druid、MyBatis-Plus 权限框架 Shiro、JWT(API接口权限) 数据库 支持Mysql、Oracle、Postgre SQL、Sql Server 其他 代码生成器","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-4","date":"2019-09-12T08:32:36.640Z","updated":"2019-09-04T01:21:34.440Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-4/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-4/","excerpt":"","text":"产品 管理 技术 提升执行力 提升自我 及时反馈 多思考 系统运维","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-3","date":"2019-09-12T08:32:36.639Z","updated":"2019-09-03T09:21:16.565Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-3/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-3/","excerpt":"","text":"前后端完全分离vue.js 前端部署到nginx服务器 操作系统在积极性低情况下会想办法进行自我激励 -","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-2","date":"2019-09-12T08:32:36.638Z","updated":"2019-09-02T09:23:55.157Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-2/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-2/","excerpt":"","text":"Thingjs ThingJS - 物联网3D可视化PaaS平台 大唐姜堰智慧电厂三维演示 技术概念：边缘计算 产业概念：泛在电力物联网 围绕着电力系统的各个环节，充分利用移动互联和人工智能这些现代化的信息技术和通讯技术实现电力系统中各个环节的万物互联、人机交互，并且具有状态全面检测信息高效处理，应用便捷灵活特征的一种智慧服务系统。 ![1567389198449](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567389198449.png) 计算机技术架构：通讯，存储，计算 云计算，云服务 “三型两网战略目标” 端到端技术 科学传播 传授 传播 体验 渗透 Future 立体环绕音 50岁左右的中年人 工作 小吃摊：杂粮煎饼，烧饼。。。 一，有技能的，可以按照技能去找工作，这个不限制的； 二，如果没有特殊技能的，一般有：花卉艺术师，送餐送水，蓝领，司机，厨师等； 三，如果有资金的，也可以自己开个小店面。（固定小摊位,卖报纸杂志,香烟,水等） 应该要买个小皮卡那种车，做小吃生意，白天备菜，晚上出摊。没有成本，而且小食做得好，挺赚钱的。 卖菜 给父母上保险 凉拌莲藕，馒头，银耳莲子粥","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-12","date":"2019-09-12T08:32:36.636Z","updated":"2019-09-12T02:05:17.683Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-12/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-12/","excerpt":"","text":"unix_timestamp(now())","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-9/2019-9-11","date":"2019-09-12T08:32:36.635Z","updated":"2019-09-11T08:16:06.655Z","comments":true,"path":"2019/09/12/每天小纸条/2019-9/2019-9-11/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-9/2019-9-11/","excerpt":"","text":"1234//获取本机ipString ip = IpUtil.getIp(request);//拼装地址前缀 http://localhost:8081/+staticAccessPath+/+图片名称 String qurl = FileUtil.getUrl(ip, wpost, url); 12345678910111213141516171819202122232425package com.manage.utils; import java.io.File;import java.io.FileOutputStream;import java.util.UUID; import org.springframework.web.multipart.MultipartFile; public class FileUtil &#123; public static String uploadFile(String path, MultipartFile file) throws Exception&#123; String fileName = file.getOriginalFilename(); String suffixName = fileName.substring(fileName.lastIndexOf(\".\")); // 文件上传后的路径 fileName = UUID.randomUUID() + suffixName; String uppath=path+fileName; File targetFile = new File(uppath); file.transferTo(targetFile); return fileName; &#125; public static String getUrl(String ip,String wpost,String staticAccessPath) &#123; String url=\"http://\"+ip+\":\"+wpost+staticAccessPath; return url; &#125; &#125; 文件上传下载虚拟路径配置https://blog.csdn.net/weixin_43966245/article/details/87902660 https://blog.csdn.net/chao821/article/details/85565231 https://blog.csdn.net/qq_37988830/article/details/84679890 代码分层的设计之道微服务apidoc-项目API文档生成## 首先，我们需要 node.js 的支持。在搭建好 node.js 环境后，通过终端输入 npm 命名进行安装。 1npm install apidoc -g 接着，我们还需要添加 apidoc.json 文件到项目工程的根目录下。 1234567&#123; \"name\": \"epms\", \"version\": \"0.1.0\", \"description\": \"电子化项目管理系统API文档\", \"title\": \"epms API DOC\", \"url\" : \"http://127.0.0.1:8080/epms\"&#125; 使用示例 123456789101112/** * @api &#123;get&#125; /index 欢迎界面 * @apiName hello * @apiGroup 公司相关的API * @apiParam &#123;int&#125; id 用户ID * @apiParam &#123;String&#125; name 用户名关键字 * @apiParam &#123;String&#125; orgName 公司/机构名关键字 */ @RequestMapping(value=\"/\",method= RequestMethod.GET) public String hello()&#123; return \"index\"; &#125; 生成api文档 –encoding 编码设置 -i输入范围路径 -o api文档输出路径 // 典型用法apidoc -i api/ -o doc/api [-c ./] -f “.*.js$” -i 表示输入，后面是文件夹路径-o 表示输出，后面是文件夹路径默认会带上 -c，在当前路径下寻找配置文件(apidoc.json)，如果找不到则会在package.json中寻找 “apidoc”: { }-f 为文件过滤，后面是正则表达式，示例为只选着js文件 与-f类似，还有一个 -e 的选项，表示要排除的文件/文件夹，也是使用正则表达式 12terminal/cmd跳转到项目的文件夹下&gt; apidoc --encoding utf8 -i ../epms/src/ -o ../epms/src/main/resources/static/apidoc/ @apiGroup 不支持中文，办法是修改它的配置文件（！该文件夹是隐藏文件夹） C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\apidoc\\node_modules\\apidoc-core\\lib\\workers\\api_group.js，注释掉//group = group.replace(/[^\\w]/g, ‘_’);注意：这里的“Administrator”是电脑主机名","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-8","date":"2019-09-12T08:32:36.632Z","updated":"2019-08-08T09:27:09.996Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-8/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-8/","excerpt":"","text":"Java学习推荐书籍java编程思想java并发编程实战深入理解java虚拟机函数式编程思维tcp/ip详解鸟哥的linux私房菜spring mvc ＋mybatis开发从入门到精通spring技术内幕elasticsearch服务器开发redis入门指南 .. 周州洲舟粥:说实话程序猿面对最大的问题应该是长期的职业生涯规划。来合理的面对技术的不断发展，自身年龄的增长，家庭与工作的关系处理。至于技术方面时间到了该会的都会了。头发真的大部分都是基因问题，生活问题，经量不要熬夜，少**，多锻炼。身体健康，好运自然来。 Belding_白:up主，怎么激发持久的动力，从而坚持下去，有什么有效的学习方法，记笔记阿什么的 CodeSheep:多出去面试被虐就能激励自己啦 gidlife:建议去leetcode刷刷题，可以锻炼代码能力。 热爱学习的林同学:今天去读书馆借了一本java 并发编程实战。结果直接看懵圈。建议还是要看看其他高并发编程视频。看了前几章引起高度不适。 二葱:没有操作系统原理基础，看不懂正常 TOEFL YASI","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-7","date":"2019-09-12T08:32:36.631Z","updated":"2019-08-15T04:02:27.710Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-7/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-7/","excerpt":"","text":"学技术的建议说在前面：方法因人而异，仅供参考 阶段一：认知了解阶段（第一印象很重要） 1.该技术的概念和方向 2.该技术解决了什么问题 3.同类技术有哪些 4.该技术的主要组成部分 5.该技术为什么出现 阶段二：学习语法，用法 频教程（效率低） 快速上手视频 入门博客 权威书籍（语言类的学习），官方文档（框架类的） 阶段三： 局部练习 小型实战 搭建环境（记录总结，写博客写博客写博客！！！ Redis缓存 数据库连接 小demo 阶段四： 上手实际项目或开源项目（先打牢基础） 阶段五： （终极目标）造轮子，撸源码","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-6","date":"2019-09-12T08:32:36.630Z","updated":"2019-08-07T09:45:24.738Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-6/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-6/","excerpt":"","text":"自建静态博客 https://www.bilibili.com/video/av44544186内容沉淀坚持引用标明出处可复现 MarkDown入门系列实战类文章 备忘录学习笔记 模式提炼工具类开源项目 c语言，高数，数据结构，计算机组成原理，计算机操作系统，计算机网络，上机的话可以去做做pat的题，数学好了可以搞算法，英语也一定要好，多去github看看，后面学语言的话还是多学java吧，毕竟现在安卓是java的虚拟机（一个外行给的建议），汇编就算了，现在微机原理都没啥人用了，单片机c也能写，能学完这些已经很不错了","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-31","date":"2019-09-12T08:32:36.629Z","updated":"2019-08-31T03:17:08.197Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-31/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-31/","excerpt":"","text":"![1567212009857](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567212009857.png) postmapping getmapping requestMapping","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-28","date":"2019-09-12T08:32:36.628Z","updated":"2019-08-28T06:07:47.053Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-28/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-28/","excerpt":"","text":"几种知名开源富文本编辑器记录和对比（仅供参考）1、UEditor 百度的。 优点：插件多，基本满足各种需求，类似贴吧中的回复界面。 缺点：不再维护，文档极少，使用并不普遍，图片只能上传到本地服务器，如果需要上传到其他服务器需要改动源码，较为难办，加载速度慢。 总结：小项目，可以用用，不推荐使用。 2、kindeditor 界面类似百度，效果很像 文档齐全但用例较少，使用还算方便。 缺点：总感觉样子不是很好看，没有现代那种风格，还是老式的传统图标。 http://kindeditor.net/demo.php 3、simditor 样式好看，插件不多，基本满足需求 文档英文，使用较为吃力，如果英文水平不好的话 github上面开源，维护较好 因为文档看起来吃力，所以本人没有考虑继续使用。 http://simditor.tower.im/ 4、bootstrap-wysiwyg 利用bootstrap实现的，简洁大方好看。 优点：轻量，好看，使用方便。 缺点：需要一定的浏览器支持，毕竟需要bootstrap http://www.bootcss.com/p/bootstrap-wysiwyg/ 5、wangEditor js和css实现 优点：轻量简洁，最重要的是开源且中文文档齐全。设计的UI漂亮。 插件基本能满足需求，本人推荐使用。 http://www.wangeditor.com/index.html 6、CKEditor 功能强大，使用较多，可以看他们官网的例子，马上就有感觉。 优点：编辑能力极强，基本和word差不多了。看起来界面极其优秀的一款。 缺点：网站访问速度一般，文档英文，需要花时间开发。 http://ckeditor.com/ 7、tinymce 支持图片在线处理，插件多，功能强 编辑能力优秀，界面好看。 同样文档为英文，开发需要花时间。 https://www.tinymce.com/ 使用之前需要考虑的点： 1需要插件，是否需要很多的插件，还是说简单的那些功能就行了。 2界面考虑，看你喜欢那个界面了。 3图片是否需要上传图片服务器。 4文档如果为英文是否会影响开发。 5支持浏览器类型和版本。 转载自：https://www.cnblogs.com/linkstar/p/6858995.html","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-25","date":"2019-09-12T08:32:36.627Z","updated":"2019-08-24T02:37:31.247Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-25/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-25/","excerpt":"","text":"地理坐标系详解","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-14","date":"2019-09-12T08:32:36.624Z","updated":"2019-08-14T08:14:39.721Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-14/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-14/","excerpt":"","text":"由于该网站的robots.txt文件存在限制指令（限制搜索引擎抓取），系统无法提供该页面的内容描述 - 了解详情 单点登录","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/2019-8/2019-8-12","date":"2019-09-12T08:32:36.623Z","updated":"2019-08-13T00:42:42.115Z","comments":true,"path":"2019/09/12/每天小纸条/2019-8/2019-8-12/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/2019-8/2019-8-12/","excerpt":"","text":"![1565612650986](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565612650986.png) ![1565612676345](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565612676345.png) ![1565612696569](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565612696569.png)","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/小纸条汇总","date":"2019-09-12T08:32:36.621Z","updated":"2019-08-28T09:59:43.756Z","comments":true,"path":"2019/09/12/每天小纸条/小纸条汇总/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/小纸条汇总/","excerpt":"","text":"技术 Electron跨平台桌面应用开发 H5 Canvas 动画特效 资料ServletContext HttpSession 以及HttpServletRequest之间的关系① 在Servlet中懂得ServletContext HttpSession 以及HttpServletRequest之间的关系 ② 懂得怎样使用它们 [共同点]不管对象的作用域怎样，共享变量和获得变量的 方法都是一致的 –setAttribute(“varName”,obj); –getAttribute（“varName”）。 变量的作用域 ServletContext–范围最大。应用程序级别的，整个应用程序都能訪问 HttpSession – 次之，会话级别的，在当前的浏览器中都能訪问[不论是在同一浏览器开多少窗体，都能够訪问]。可是换个浏览器就不行了。就必须又一次创建session HttpServletRequest –范围最小，请求级别，请求结束，变量的作用域也结束[也就是仅仅是一次訪问，訪问结束，这个也结束thymeleaf th:if 判断表达式 123456gt：great than（大于）&gt;ge：great equal（大于等于）&gt;=eq：equal（等于）==lt：less than（小于）&lt;le：less equal（小于等于）&lt;=ne：not equal（不等于）!= 123&lt;!--这里以th:if为例，其他差不多用法： 例 --&gt;th:if=\"$&#123;xx&#125; lt 'x'\" &lt;-----------&gt; xx &lt; x 12345678910&lt;div th:if=\" $&#123;userCarSize&#125; lt '3'\"&gt;&lt;div class=\"addList\"&gt;&lt;p&gt;&lt;a id=\"gotobindView\"&gt;&lt;span class=\"icon\"&gt;&lt;/span&gt;添加绑定&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最多绑定三辆车&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; thymeleaf介绍请见： https://blog.csdn.net/qq_31424825/article/details/83628202 UML Class Diagram空箭泛化虚实现虚线依赖实关联空菱聚合实组合项目沟通图常见 ![1566463506152](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566463506152.png) myql -u root -p u user passwordJS 中Json常用操作 直接定义json 12var json = &#123;\"name\": \"小明\", \"age\": 12&#125;;console.log(json); json 转 String 12 var str = JSON.stringify(json);console.log(str); String 转 Json 12json = JSON.parse(str);console.log(json) 添加新的字段 123456// 方式1 json.sex = '女';// 方式2 var id = 'id'; json[id] = '123'; console.log(json) 判断字段是否存在 1console.log(json.hasOwnProperty(id)) 删除字段 123456方式1delete json.id;console.log(json);方式2delete json[id];console.log(json); 添加JsonArray 1234var array = [&#123;\"name\": \"小李\", \"age\": 20&#125;];console.log(array);array.push(json);console.log(array); 遍历JsonArray 123for (var item in array) &#123; console.log(array[item].name) &#125; 删除array中的一项 1array.splice(1) 完整代码示例： 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=\"text/javascript\"&gt; var json = &#123;\"name\": \"小明\", \"age\": 12&#125;; console.log(json); var str = JSON.stringify(json); console.log(str); json.sex = '女'; var id = 'id'; json[id] = '123'; console.log(json) console.log(json.hasOwnProperty(id)) delete json.id; console.log(json); id = 'id'; json[id] = '123'; console.log(json); delete json[id]; console.log(json); var array = [&#123;\"name\": \"小李\", \"age\": 20&#125;]; console.log(array); array.push(json); console.log(array); for (var item in array) &#123; console.log(array[item].name) &#125; array.splice(1) console.log(array)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 地理坐标系详解地理坐标系详解 富文本编辑器小纸条2019-8-28 我的作品已完成 H5 canvas 环状饼状统计图 实践中 代码社区 code_community JAVA (spring boot+ mybatis+html thymeleaf) HEXO MyBlog https://870727741.github.io/ 计划中 java web 个人博客","categories":[],"tags":[]},{"title":"","slug":"每天小纸条/DailyShare","date":"2019-09-12T08:32:36.619Z","updated":"2019-09-02T07:38:39.163Z","comments":true,"path":"2019/09/12/每天小纸条/DailyShare/","link":"","permalink":"http://yoursite.com/2019/09/12/每天小纸条/DailyShare/","excerpt":"","text":"2019/5/21 J 华为被制裁了。不懂政治，看不懂国际形势，卸载了谷歌，下载了火狐。 中午睡觉，很吵，外面建筑队在施工，钻头一直在工作 2019/5/23 UP UP! 2019/5/27 昨天老妈将档案用顺丰快递寄出，今天就收到了，希望档案问题尽快解决，上午超困，下午好多了，不知道是不是前天熬夜的后遗症，最近虚弱的很 2019/6/19 档案终于调回原籍了。安心了今天看了一个励志视频，感觉自己对生活又充满了希望，要加油哦😊 2019/7/19 公司搬到了信阳平桥区高铁站附近泰阳辰小区 ，周总让宿舍尽快装了空调 ，热水器。感谢周总，虽然我们都理所当然的认为这是作为公司应该做的，但是老板能做这些为我们考虑是我们的幸运了。 住的地方有了，空调，热水器，吃饭，办公，没有理由不好好工作呀。周总要注意身体呀。身体是革命的本钱，。也许现在公司还有很多我们吐槽的地方，但是它在向好的方向发展。希望这里面有我的力量，我也要加油啊！ 2019/1/23 2019/7/27 上周六（7/20）去见了小雨，很开心，买衣服花了一下午，很开心。 骚扰了周昆许多天，他终于不再说话。今天打算给他发了最后一条消息【其实，…我只是想见一面，单纯见一面…】，到底是年纪大了，年少的我估计已经直接发完就拉黑了，现在的我不但没拉黑，还在他回消息时直接要了地址。 我是不是没脑子。不想和你说话，不会来见你的人，对你自然不会有感情。 其实是，我只是想画个句号吧，好在老去时不会有遗憾，人生，哪里需要那么多的顾忌和无奈，想做的事情就放手去做吧，束手束脚终归不开心的。做了也许不开心，可是不做会成心病吧。 2019/7/29 上午组装电脑，排插不够，我回宿舍拿排插。我们宿舍在17楼，我坐电梯上去，和平时一样，直接按了17。手里拿着雨伞和替换排插，我安静地等着电梯停下。十几秒大概，不知道到了几楼，突然间电梯就黑了，电梯晃了一下，停了下来。“电梯坏了”，我这样想，心里慌乱无比。我手机没有手机，电梯里一片黑暗，门缝投来细细明亮的光。我记得电梯里有紧急按钮，我透过黑暗向上看到一个铃铛，我按了下去，没有松手。 很快接通了，一个女声传出来“有人吗”，“我被困在电梯里了。”我说到。“有人吗”，我听到了同样的话，她听不到我说话！？我开始害怕了，“我被困在电梯离了！”我大声喊到，可是回答我的一直是那句“有人吗”。我害怕极了，使劲按着紧急呼叫按钮，希望可以被听到。电梯里空间封闭，我穿着长袖的连衣裙，害怕而慌乱，汗水浸湿了后背，右手拿着东西，左手按着按钮，时间久了左手酸疼，我犹豫了一下，把右手的物品扔在了地上，右手代替了左手。 后来手指疼的时候我松开了手，然后发现我的声音电话能收到了。 在电梯里我想过，如果电梯掉下去我摔死了也可以；电话通了，挂电话前我在想要不要留遗言；电梯里好黑呀，我会不会得幽闭恐惧症。。。你看我心理活动这么丰富就知道不会了。 2019/7/31 昨天运动爬17层楼，12min/1.5km,按摩一套，今天早晨 【早晨瑜伽】 每天喝豆浆，希望不要长胡子了 昨天因为养老保险的事情生气了，差点伤及无辜 养老保险处理 周昆 老妈生日礼物 2019/8/4 我真的改变了。黑化的感觉出奇的好呢 2019/8/14 向周昆要了生日礼物，没有理由，想要，就这样 2019/8/26 今天和老妈一起 逛街买了衣服 昨天和薛丹丹还有王闪一块，给王闪 租房子，一块聊了高中生活，高中同学的现状，薛丹丹送了我最喜欢的玫瑰花，可惜没香味 。去皮肤科医生给我看了病，药单子写满了中药，医生说我弟弟的病比我还严重。两个人药费花了一千多 。哦，希望身体能养好 周昆礼物 - 颈部按摩仪？！！ 让羊羔给我唱生日歌 小雨生日礼物 200红包 老爸老妈 发红包~ 决定要养猫，以后一个人了，就让猫陪着我吧 ![1566812520752](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566812520752.png) 2019/9/2 心情不好，听音乐，抄文章","categories":[],"tags":[]},{"title":"","slug":"技术笔记/设计模式/Builder设计模式","date":"2019-09-12T08:32:36.616Z","updated":"2019-09-04T09:49:03.247Z","comments":true,"path":"2019/09/12/技术笔记/设计模式/Builder设计模式/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/设计模式/Builder设计模式/","excerpt":"","text":"示例 链式调用/构建者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 为我们的对象选择性地设置属性，根据需求设置解决了多属性的类中构造器数量繁多的问题 12345678//Android中的第三方网络图片加载工具Glide.with(context).load(\"url\").into(imageVIew);//Android中的AlertDialog.Buildernew AlertDialog.Builder(context) .setTitle(\"问题：\") .setMessage(\"请问你满18岁了吗？\") .setIcon(R.mipmap.ic_launcher_round) .build() 构建者完整对象 示例手动版1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.jmp.maven;public class Contact&#123; private String name; private String gender; private int age; private Contact (Builder builder) &#123; this.name=builder.name; this.gender=builder.gender; this.age=builder.age; &#125; public static class Builder&#123; private String name; private String gender; private int age; public Builder()&#123; &#125; public Builder name(String name)&#123; this.name=name; return this; &#125; public Builder gender(String gender)&#123; this.gender=gender; return this; &#125; public Builder age(int age)&#123; this.age=age; return this; &#125; // public Contact build()&#123; return new Contact(this); &#125; &#125; //使用测试main public static void main(String[] args) &#123; Contact contactB=new Builder() .name(\"Monica J\") .gender(\"girl\") .age(18) .build(); Contact contactA=new Builder() .name(\"Lisa\") .gender(\"girl\") .build(); &#125;&#125; 工具版 LomBok使用方法 安装插件:操作步骤：File -&gt; Settings… -&gt; Plugins -&gt; Browse repositories… -&gt; 输入Lombok搜索并安装，安装完成后重启IntelliJ IDEA。 引用jar包如果是使用Maven构建项目，则添加以下依赖： 12345678&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.18&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 通过lombok创建构建对象 12345678910111213141516171819202122import lombok.Builder;import lombok.Data;@Data@Builder(toBuilder = true)public class Contact &#123; private String name; private String gender; private int age; //测试main public static void main(String[] args) &#123; Contact contactA=Contact .builder() .name(\"Monica J\") .gender(\"girl\") .age(18) .build(); Contact contactB=Contact .builder() .name(\"Monica J\") .gender(\"girl\") .build(); &#125;&#125;","categories":[],"tags":[]},{"title":"","slug":"技术笔记/版本控制问题/git简介及常用命令","date":"2019-09-12T08:32:36.613Z","updated":"2019-08-16T00:42:56.501Z","comments":true,"path":"2019/09/12/技术笔记/版本控制问题/git简介及常用命令/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/版本控制问题/git简介及常用命令/","excerpt":"","text":"Git常用命令汇总以及其它相关操作一、常用的git命令–文件目录操作命令 12341 mkdir * 创建一个空目录 *指目录名2 pwd 显示当前目录的路径。3 cat * 查看*文件内容4 git rm * 删除**文件 –git初始化操作 123451 git init 把当前的目录变成git仓库，生成隐藏.git文件。2 git remote add origin url 把本地仓库的内容推送到GitHub仓库。3 git clone git@url/test.git 从远程库克隆4 git add * 把x文件添加到暂存区去。5 git commit –m \"*\" 提交文件 –m 后面的是注释。 –git 克隆分支 1231 git clone xxx.git 最简单直接的命令2 git clone xxx.git \"指定目录\" clone到指定目录3 git clone -b branchname xxx.git clone时创建新的分支替代默认Origin HEAD（master） –clone 远程分支 git clone 命令默认的只会建立master分支，如果你想clone指定的某一远程分支(如：dev)的话，可以如下： 1. 查看所有分支(包括隐藏的) git branch -a 显示所有分支 12341 * master2 remotes/origin/HEAD -&gt; origin/master3 remotes/origin/dev4 remotes/origin/master 2. 在本地新建同名的(“dev”)分支，并切换到该分支 121 git checkout -t origin/dev 该命令等同于：2 git checkout -b dev origin/dev –查看命令 123451 git status 查看仓库状态2 git diff * 查看X文件修改了那些内容 3 git log 查看历史记录4 git reflog 查看历史记录的版本号id（记录你的每一次命令,不论是否提交）5 git log --pretty=oneline 如果信息量太多可以进行比较好的列表显示 –版本回退 1231 git reset –hard HEAD^ 回退到上一个版本2 git reset --hard HEAD~第几个 如果想回退到第3个版本，使用git reset –hard HEAD~33 git reset --hard 057d 回退到某一个具体的版本号 –撤销修改 1231 git checkout file-name 恢复某个已修改的文件（撤销未提交的修改）：2 git revert HEAD 还原最近一次提交的修改：3 git revert commit-id 还原指定版本的修改 –分支管理 1234567891011121314 1 git branch 查看本地所有的分支 2 git branch -a 查看远程所有的分支 3 git branch name 创建分支 4 git branch –d dev 删除dev分支 5 git push origin --delete dev 删除远程的dev分支 6 git branch -m dev develop 重命名分支 7 git checkout –b dev 创建dev分支 并切换到dev分支上 8 git merge dev 在当前分支上合并dev分支代 9 git push origin zyf-dev 把当前新疆的zyf-dev分支推送到远程库(远程仓库没有给分支则会新建立该分支) 10 git checkout — * 把XX文件在工作区的修改全部撤销。11 git checkout master 切换回master分支12 git push --set-upstream origin dev 提交修改并创建远程分支dev –tag相关操作 1234561 git tag 列出所有的tag2 git tag name 打轻量标签 name3 git tag -d name 删除本地的tag4 git push origin --delete tag name 删除远程的tag5 git show name 查看tag信息6 git push origin name 将tag提交到远程 –隐藏的文件 123451 git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作2 git stash list 查看所有被隐藏的文件列表3 git stash apply 恢复被隐藏的文件，但是内容不删除4 git stash drop 删除文件5 git stash pop 恢复文件的同时 也删除文件 –查看远程库信息(git remote的用法) 123451 git remote 查看远程库的信息2 git remote –v 查看远程库的详细信息3 git remote add name url 添加远程仓库4 git remote rename oldname newname 重命名仓库5 git remote rm 删除仓库 –将远程分支拉取到本地 121 方法一：git checkout -b 本地分支名x origin/远程分支名x2 方式二：git fetch origin 远程分支名x:本地分支名x –git pull操作 12345678910111213141516171819 1 git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并，基本的格式如下。 2 $ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 3 4 取回origin主机的next分支，与本地的master分支合并，需要写成下面这样 5 $ git pull origin next:master 6 7 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 8 $ git pull origin next 9 10 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。11 $ git fetch origin12 $ git merge origin/next13 14 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。15 Git也允许手动建立追踪关系。16 git branch --set-upstream master origin/next17 18 上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。19 $ git pull origin –git 设置大小写敏感 Windows上的Git默认是大小写不敏感的，这样多平台写作就可能会出现问题。Win上的Git设置为大小写敏感的命令如下 11 git config core.ignorecase false –git 设置忽略文件或文件夹权限修改 11 git config core.filemode false –创建追踪分支 不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。 123$ git config --global push.default matching# 或者$ git config --global push.default simple (最好使用这种方式) $ git branch –track master origin/master //在使用 git branch 命令时加上 ‘–track’ 参数, 来手动创建一个追踪分支 –切换git 命令提示中文到英文 123456// ubuntu装的git不知道怎么就出现全中文的提示,不太好,果断切换到中文了,切换方法如下:// 1:写入echo \"alias git='LANG=en_GB git'\" &gt;&gt; ~/.bashrc// 2:生效source ~/.bashrc –git 删除未添加到版本中的文件或者文件夹 git checkout 只能回退在版本中的修改或者删除, 对于新添加的文件是没有作用的, 也就是说, 新建的文件或者文件夹是:Untracked files, 要删除或者清理掉这些文件,需要使用 git clean 命令: 12345678910111213 1 // 删除 untracked files 2 git clean -f 3 4 // 连 untracked 的目录也一起删掉 5 git clean -fd 6 7 // 连 gitignore的untrack 文件/目录也一起删掉 （一般这个是用来删掉编译出来的 .o一类的文件） 8 git clean -xfd 9 10 // 在使用清理 git clean之前，建议加上 -n 来先看看会删掉哪些文件，防止重要文件被误删11 git clean -nxfd12 git clean -nf13 git clean -nfd 三、常出错误：1：There is no tracking information for the current branch… 则说明本地分?支和远程分?支的链接关系没有创建，用命令： git branch –set-upstream branch-name origin/branch-name。 2: ![rejected] dev -&gt; dev (non-fast-forward) … Updates were rejected because the tip of your current branch推送失败，因为远程代码的最新提交和你试图推送的提交有冲突，解决办法也很简单，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送 3：CONFLICT (content): Merge conflict in . . .这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突一样。解决后，提交，再push： 4: You are not currently on a branch, so I cannot use any 解决办法：git checkout master 5：Your branch is behind ‘origin/master’ by 1 commit, and can be fast-forwarded. 上面的显示的意思是，有一个更新还没有反应到本地来，可能是别人往server上提交了一点东西。 可以使用git pull命令拿这些更新到本地来。 6：在执行 git push 时可能会看到如下消息: 123456warning: push.default is unset; its implicit value is changing inGit 2.0 from &apos;matching&apos; to &apos;simple&apos;. To squelch this messageand maintain the current behavior after the default changes, use:git config --global push.default matchingTo squelch this message and adopt the new behavior now, use: git config --global push.default simpl 解决办法：‘matching’ 参数是 Git 1.x 的默认行为，如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。根据提示，修改git push: 11 git config --global push.default matching 再次执行git push 就行了。 7：You asked to pull from the remote ‘origin’, but did not specify:**a branch. Because this is not the default configured remote**for your current branch, you must specify a branch on the command line. 解决办法：找到：.git/config 修改如下 1231 [branch \"master\"]2 remote = origin3 merge = refs/heads/master 8：ERROR: Permission to user1/test.git denied to user2 fatal: The remote end hung up unexpectedly 账户冲突，下面有针对讲解 9: 添加的ssh不起作用？ ssh 的添加一定要在root用户权限在添加，其他的权限不起作用，切记！ 四、经验之谈：1：git revert 和 git reset的区别开始感觉两者一样，但是在客户端和命令行窗口操作之后发现大大的不同，看一个例子：我先提交三次1,2,3 id号分别是（15d5f70,a167eb1,8fbfe3f）如下图然后执行版本回退 git reset –hard a167 如图： 说明执行git reset –hard ** 版本回退是撤销某次提交，但是此次之后的修改都会被退回到暂存区，因为上面显示有提交（by 1 commit）同理执行 git revert –hard a167git revert是用一次新的commit来回滚之前的commit 在回滚操作上看，效果一样。但是在日后继续merge以前的老版本时有区别。revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。得到结论：git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。 这样在版本回退的时候就比较的好，比如本地dev分支，远程master分支，某一次的上线发现线上有重大的bug，然后你reset本地代码到前一个版本，在你git push 的时候git会报一个错误：“说你的本地分支版本低于远程master分支的版本，让你先去pull 下来代码，再提交”，这就不行了，你pull下来的代码还是最新版有bug的代码，不进行pull代码，master分支又不让你提交。解决这个问题还得使用 revert 来进行 “回退”操作，为什么加引号呢，是因为这种回退是向前提交一次中和了上次的修改，这就比较好了，这样你revert之后相当于指针向前移动一次，本地版本dev高于远程master版本，这时你就可以git push 本地代码到远程了。也就是说，git reset 对未提交到（git push）远程的修改做回滚比较好，如果要回滚本地，同时想远程也回滚，就要用到revert 五、常用修改：1：避免每次提交都输入用户名和密码 原因是使用了https方式 puh 在termail里边 输入 git remote -v 可以看到形如一下的返回结果 origin https://github.com/git/librarysystem.git(fetch) origin https://github.com/git/librarysystem.git(push) 下面把它换成ssh方式的。 1231. git remote rm origin2. git remote add origin git@github.com:yu/demo.git3. git push origin 2：添加忽略文件 .gitignore .gitignore配置文件用于配置不需要加入版本管理的文件。 配置语法： “/“ 开头表示目录； “*” 通配多个字符； “?” 通配单个字符 “[]” 包含单个字符的匹配列表； “!” 表示不忽略(跟踪)匹配到的文件或目录； 说明：git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效； 示例：（1） foder/* 忽略目录foder下的全部内容,不管是根目录下的 /foder/ 目录，还是某个子目录 /list/foder/ 目录，都会被忽略。 （2） /foder/* 说明：忽略根目录下的 /foder/ 目录的全部内容； （3） /*!.gitignore !/fw/bin/ !/fw/sf/ 说明：忽略全部内容，但是不忽略 .gitignore文件,根目录下的 /fw/bin/ 和 /fw/sf/ 注意问题： .gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把要忽略的文件纳入了版本库，就不起作用了。 3：如何在同一台电脑上使用两个git账户 问题描述：作为程序员有时候是有多个的项目，而且每个项目git的用户名，邮箱等，都不一样。就我来说，我在github上有一个账号，自己开发一些东西，同时我参与的也有项目需要连接别人的github账号，在我电脑上只有一个git客户端，本地一个身份用户，开始的时候我自己开发是用ssh方式，参与的项目的是用https连接，但是https每次都需要输入密码，非常不方便，所以想转成ssh连接，利用命令：&gt;$ git remote rm origin&gt;$ git remote add origin git@github.com:yu/demo.git&gt;$ git push origin转换成功，不幸的是push的时候出错了：ERROR: Permission to user1 denied to这种情况的解决方式是方法，使用本地托管多个个ssh的密钥，不同的账号是用不同的密匙。第一步：生成SSH Key 执行命令，如下图： 具体说明： 1234567$ ssh-keygen -t rsa -C \"your_email@youremail.com\" Creates a new ssh key using the provided email Generating public/private rsa key pair. #输入将要保存的路径，我的默认为当前路径（/c/Users/zhaoyafei/.ssh/id_rsa）,但是不能使用默认文件id_rsa，要添加新账户就要生起一个成新的好记的名字，例如id_rsa_work Enter file in which to save the key (/c/Users/zhaoyafei/.ssh/id_rsa): #输入回车后提示输入一个类似于密码的号，直接回车就行 Enter passphrase (empty for no passphrase): Enter same passphrase again: 第二步：识别新的私钥 默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent 12ssh-add ～/.ssh/id_rsa_work //该命令如果报错：Could not open a connection to your authentication agent.可执行 ssh-agent bash 命令后再执行ssh-add -l 看是否成功。 执行命令，如下图： 第三步：修改config文件 该文件用于配置私钥对应的服务器。内容如下: 12345678910# Default github （默认的） Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa # second user(work@gmail.com) Host github_work HostName github.com User git IdentityFile ~/.ssh/id_rsa_work ​ 这样配置，也就是使用hostname为github.com会根据用户名的不同，去使用不用的private key。github上，也可以添加对应的公钥。其实这个配置是关于ssh的与git无关，只是git使用的方式是ssh的方式。Host可随意，方便自己记忆，后续在添加remote是还需要用到。 第四步：将SSH key输入到GitHub网站中 将生成的id_rsa_work.pub输入到GitHub网站中就可以了，输入完成后单击Add key后，会看到git-tutorial已经被添加进去了。 配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加abc帐号下的一个仓库test，则需要这样添加：git remote add test git@github-work:abc/test.git #并非原来的git@github.com:abc/test.git 这样每次连接都会使用id_rsa_abc与服务器进行连接。 注意：github根据配置文件的user.email来获取github帐号显示author信息，所以对于多帐号用户一定要记得将user.email改为相应的email(work@mail.com)。我遇到的问题是本地单一用户，链接不同的github账号，所以用户配置可以采用全局配置。如果不同本地用户（不同的身份标识，即需要本地使用不同的用户名），那么git就不要使用有–global的配置，可以按照下面的方法： 1234561)设置局部的user.name和user.email git config user.name \"xxxxxx\" git config user.email \"xxx@xxx.com\"2)设置全局的user.name和user.email git config --global user.name \"xxxxxx\" git config –-global user.email \"\" 六、题外话（相关概念）Git - 版本控制工具 Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。开放源码社区中的有些人觉得 BitKeeper 的许可证并不适合开放源码社区的工作，因此 Torvalds 决定着手研究许可证更为灵活的版本控制系统。尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是我们已经发现在很多其他自由软件项目中也使用了 Git。例如 最近就迁移到 Git 上来了，很多 Freedesktop 的项目也迁移到了 Git 上。 Github - 一个网站，提供给用户空间创建git仓储，保存用户的一些数据文档或者代码等 作为开源代码库以及版本控制系统，Github目前拥有140多万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份复制出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。GitHub可以托管各种git库，并提供一个web界面，但与其它像 SourceForge或Google Code这样的服务不同，GitHub的独特卖点在于从另外一个项目进行分支的简易性。为一个项目贡献代码非常简单：首先点击项目站点的“fork”的按 钮，然后将代码检出并将修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。已经有人将GitHub称为代码玩家的MySpace。 GitLab - 基于Git的项目管理软件GitLab 是一个用于仓库管理系统的开源项目。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。三者都是基于git的，可以说是git的衍生品。 GIT介绍(其他版本)Git简介Git是Linux之父Linus的第二个伟大的作品，它最早是在Linux上开发的，被用来管理Linux核心的源代码。后来慢慢地有人将其移植到了Unix、Windows、Max OS等操作系统中。 Git是一个分布式的版本控制系统，与集中式的版本控制系统不同的是，每个人都工作在通过克隆建立的本地版本库中。也就是说每个人都拥有一个完整的版本库，查看提交日志、提交、创建里程碑和分支、合并分支、回退等所有操作都直接在本地完成而不需要网络连接。 对于Git仓库来说，每个人都有一个独立完整的仓库，所谓的远程仓库或是服务器仓库其实也是一个仓库，只不过这台主机24小时运行，它是一个稳定的仓库，供他人克隆、推送，也从服务器仓库中拉取别人的提交。 Git是目前世界上最先进的分布式版本控制系统，没有之一，对，没有之一! 三个区![1565915285169](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565915285169.png) 工作区(working diretory) 用于修改文件 缓存区(stage) 是用来暂时存放工作区中修改的内容 提交历史（commit history） 提交代码的历史记录 主要的几个命令git add # 将工作区的修改提交到暂存区 git commit # 将暂存区的修改提交到当前分支 git reset # 回退到某一个版本 git stash # 保存某次修改 git pull # 从远程更新代码 git push # 将本地代码更新到远程分支上 git reflog # 查看历史命令 git status # 查看当前仓库的状态 git diff # 查看修改 git log # 查看提交历史 git revert # 回退某个修改 git commit用法 git commit –m “本次提交描述” 该命令会将git add .存入暂存区修改内容提交至本地仓库中，若文件未添加至暂存区，则提交时不会提交任何修改。 git commit -a 相当于运行 git add -u把所有当前目录下的文件加入缓存区域再运行git commit. 注意！对于新增的文件，并没有被commit git commit –am “本次提交描述” 或者git commit –a –m“本次提交描述” 等同于上面的-a和-m git commit –amend 修改最近一次提交。有时候如果提交注释书写有误或者漏提文件，可以使用此命令。对于漏提交的文件，需要git add到缓存区之后，git commit –amend才能将修改追加到最近的一次提交上。 git stash用法 $ git stash 所有未提交的修改都保存起来，用于后续恢复当前工作目录 $ git stash save “stash_name” 给每个stash加一个message，用于记录版本 $ git stash pop / git stash apply 恢复最新缓存的工作目录（第一个），并删除缓存堆栈中的那一个stash删除(pop), apply则只恢复不删除 $ git stash list 查看现有所有stash 在使用git stash pop(apply)命令时可以通过名字指定使用哪个stash，默认使用最近的stash（即stash@{0}） $ git stash drop 移除最新的stash，后面也可以跟指定stash的名字 git reset用法git reset根据–soft –mixed –hard，会对working tree和index和HEAD进行重置 $ git reset HEAD^ 回退版本，一个^表示一个版本，可以多个，另外也可以使用 git reset HEAD~n这种形式。 也可以回退到指定版本： $ git reset commit-id soft 参数：git reset –soft HEAD~1 意为将版本库软回退1个版本，所谓软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区 默认的mixed参数：git reset HEAD～1 意为将版本库回退1个版本，将本地版本库的头指针全部重置到指定版本，且会重置暂存区，即这次提交之后的所有变更都移动到工作区 hard参数：git reset –hard HEAD～1 意为将版本库回退1个版本，但是不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码清空（工作区是clean状态） 注意，soft参数与默认参数都不会修改工作区代码，只有hard参数才会修改工作区代码。 另外，git reset HEAD filename 回退文件，将文件从暂存区回退到工作区（unstage），此时不能带hard,soft参数 git reflog如果在回退以后又想再次回到之前的版本，git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录 12345678615ce06 HEAD@&#123;44&#125;: rebase -i (finish): returning to refs/heads/my_test_branch615ce06 HEAD@&#123;45&#125;: rebase -i (fixup): zancun_new702356c HEAD@&#123;46&#125;: rebase -i (fixup): # This is a combination of 2 commits.c997622 HEAD@&#123;47&#125;: rebase -i (reword): zancun_newfb74ec2 (origin/master, origin/HEAD) HEAD@&#123;48&#125;: rebase -i (start): checkout FETCH_HEADf3ef592 HEAD@&#123;49&#125;: commit: zancun36b82c75 HEAD@&#123;50&#125;: commit: zancun2e900fa0 HEAD@&#123;51&#125;: commit: zancun 比如说，回退到commit: zancun3，只需要： git reset –hard f3ef592 (或者HEAD@{49}) 即可 这个命令对于找回丢失的代码非常有用。 git add删除文件后需要 git add -A, 光 git add. 不行，区别如下： git add -A 保存所有的修改 git add . 保存新的添加和修改，但是不包括删除 git add -u 保存修改和删除，但是不包括新建文件。 所以默认使用git add -A就行 git checkoutgit checkout既可以操作分支，也可以操作文件 git checkout切换分支$ git checkout -b newBranchName Switched to a new branch ‘newBranchName’ 这相当于执行下面这两条命令： git branch newBranchName git checkout newBranchName(工作区一定要是clean的) $ git checkout -b newBranchName remote_branch_name 拉取远程分支remote_branch_name创建一个本地分支newBranchName，并切到本地分支newBranchName，采用此种方法建立的本地分支会和远程分支建立映射关系。 git checkout 回退修改git checkout – fileName 这条命令把fileName从当前HEAD中检出，也就是回退当前工作区的这个文件的修改 –可以省略不写 如果需要回退工作区的全部文件修改，可以使用： git checkout –hard HEAD 而不需要对每个文件进行checkout，这样太累 git revertgit revert,反转提交, 撤销一个提交的同时会创建一个新的提交，也就是用一个新提交来消除一个历史提交所做的任何修改. git revert commit-id revert指定的一个commit git revert HEAD~3 revert指定倒数第四个commit revert过程有可能遇到冲突，要么git revert –abort终止此次revert操作，代码还原至revert命令前。要么手动消除冲突(同普通的冲突解决)，然后add commit reset,checkout,revert总结下面这个表格总结了这些命令最常用的使用场景。记得经常对照这个表格，因为你使用Git时一定会经常用到。 命令 | 作用域 | 常用情景 —- | — git reset | 提交层面 | 在私有分支上舍弃一些没有提交的更改 git reset| 文件层面 | 将文件从缓存区中移除 git checkout| 提交层面| 切换分支或查看旧版本 git checkout| 文件层面| 舍弃工作目录中的更改 git revert| 提交层面| 在公共分支上回滚更改 git revert| 文件层面| （然而并没有） 删除分支删除分支： $ git branch -d branchName 或者， git branch -D branchName 删除分支（不管它有没有merge） 前提是先要切换到其他分支 $ git branch -d branch1 error: The branch ‘branch1’ is not fully merged. If you are sure you want to delete it, run ‘git branch -D branch1’. git pushgit push命令用于将本地分支的更新，推送到远程主机。 12$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;$ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 123$ git push origin :master# 等同于$ git push origin --delete master 上面命令表示删除origin主机的master分支。如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。 1$ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。 1$ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push 1$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 将当前分支推送到远程的同名的简单方法，如下: 1$ git push origin HEAD 将当前分支推送到源存储库中的远程引用匹配主机。 这种形式方便推送当前分支，而不考虑其本地名称。如下: 1$ git push origin HEAD:master 单独使用git push时，没有指定push的remote分支名，假如当前本地分支名称与其对应的remote分支名称不一样，则会有一下提示： 1234567891011fatal: The upstream branch of your current branch does not matchthe name of your current branch. To push to the upstream branchon the remote, use git push origin HEAD:my_new_test_branchTo push to the branch of the same name on the remote, use git push origin testTo choose either option permanently, see push.default in 'git help config'. 当执行git push origin test时，会在远程重新创建一个新的分支，名称就是test，然后把修改同步到test分支。 git pullgit pull命令用于从另一个存储库或本地分支获取并集成(整合)。git pull命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并， 1$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 比如，要取回origin主机的master分支，与本地的test分支合并，需要写成下面这样 1$ git pull origin master:test 如果远程分支(master)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写： 1$ git pull origin master 将远程存储库中的更改合并到当前分支中。在默认模式下，git pull是git fetch后跟git merge FETCH_HEAD的缩写。 更准确地说，git pull使用给定的参数运行git fetch，并调用git merge将检索到的分支头合并到当前分支中。 使用–rebase，它运行git rebase而不是git merge。也就是说 12git pull = git fetch + git mergegit pull --rebase = git fetch + git rebase git中都fetch命令是将远程分支的最新内容拉到了本地，但是fetch后是看不到变化的，此时本地多了一个FETCH_HEAD的指针，checkout到该指针后可以查看远程分支的最新内容。然后checkout到master分支，执行metch,选中FETCH_HEAD指针,合并后如果出现冲突则解决冲突，最后commit。 pull的作用就相当于fetch和merge，自动合并 git fetch origin master git merge FETCH_HEAD git fetch origin isoda-android_1.3.0_feature :branch1 使用远程isoda-android_1.3.0_feature分支在本地创建branch1分支（但不会切换到该分支） 1. git merge将 origin 分支合并到 mywork 分支最简单的办法就是用下面这些命令 git checkout mywork git merge origin 或者，你也可以把它们压缩在一行里: git merge origin mywork 假设远程分支上有3次提交A,B,C: ![1565915387430](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565915387430.png) 在远程分支origin的基础上创建一个名为”mywork”的本地分支并提交了修改E，同时有其他人在”origin”上做了一些修改并提交了修改D。 ![1565915400963](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565915400963.png) image_1chevnkgpshs17133n5bqrfpjt.png-20.6kB 用git merge命令把”origin”分支与本地提交合并（merge）成版本M，mywork 分支中新的合并提交（merge-commit）将两个分支的历史连在了一起，但这样会形成图中的菱形，让人很困惑。 ![1565915423054](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565915423054.png) Merge 好在它是一个安全的操作，比较安全，现有的分支不会被更改，避免了 rebase 潜在的缺点（后面会说）。另一方面，这同样意味着每次合并上游更改时 feature 分支都会引入一个外来的合并提交。如果 master非常活跃的话，这或多或少会污染你的分支历史。虽然高级的 git log 选项可以减轻这个问题，但对于开发者来说，还是会增加理解项目历史的难度。 2. git rebase作为 merge 的替代选择，你可以像下面这样将 mywork 分支并入 origin 分支： git checkout mywork git rebase origin 它会把整个 mywork 分支移动到 origin 分支的后面，有效地把所有 master 分支上新的提交并入过来。但是，rebase为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。rebase的好处是避免了菱形的产生，保持提交曲线为直线，让大家易于理解。 rebase最大的好处是你的项目历史会非常整洁。首先，它不像 git merge 那样引入不必要的合并提交。其次，如上图所示，rebase 导致最后的项目历史呈现出完美的线性——你可以从项目终点到起点浏览而不需要任何的 fork。这让你更容易使用 git log、git reset 和 gitk 来查看项目历史。 不过，这种简单的提交历史会带来两个后果：安全性和可跟踪性。如果你违反了 rebase 黄金法则，重写项目历史可能会给你的协作工作流带来灾难性的影响。此外，rebase 不会有合并提交中附带的信息——你看不到 mywork 分支中并入了上游的哪些更改。 在rebase的过程中，有时也会有conflict，这时Git会停止rebase并让用户去解决冲突，解决完冲突后，用git add命令去更新这些内容，然后不用执行git commit,直接执行git rebase –continue,这样git会继续apply余下的补丁。 在任何时候，都可以用git rebase –abort参数来终止rebase的行动，并且mywork分支会回到rebase开始前的状态。 官方的两张merge和rebase对比图： merge示例图： rebase示例图： 3. rebase的高级操作–交互式rebase交互式的 rebase 允许你更改并入新分支的提交。这比自动的 rebase 更加强大，因为它提供了对分支上提交历史完整的控制。一般来说，这被用于将 feature 分支并入 master 分支之前，清理混乱的历史。 把 -i 传入 git rebase 选项来开始一个交互式的rebase过程： git checkout feature git rebase -i master 它会打开一个文本编辑器，显示所有将被移动的提交： 12345678910111213141516171819202122pick e900fa0 zancunpick 6b82c75 zancun2pick f3ef592 zancun3# Rebase fb74ec2..f3ef592 onto fb74ec2 (3 commands)## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like \"squash\", but discard this commit's log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out 这个列表定义了 rebase 将被执行后分支会是什么样的。更改 pick 命令或者重新排序，这个分支的历史就能如你所愿了。比如说，如果第二个和第三个提交只是修复了第一个提交中的小问题，你可以用 fixup 命令把它们合到第一个提交中，并修改第一个的日志： 123r e900fa0 zancunf 6b82c75 zancun2f f3ef592 zancun3 这样三个提交合并成了一个提交，并可以重新修改提交日志，非常实用。 忽略不重要的提交会让你的 feature 分支的历史更清晰易读。这是 git merge 做不到的。 4. Rebase的黄金法则当你理解rebase是什么的时候，最重要的就是什么时候不能用rebase。git rebase 的黄金法则便是，绝不要在公共的分支上使用它。 比如说，如果你把 master分支rebase到你的feature 分支上会发生什么： 这次 rebase 将 master 分支上的所有提交都移到了 feature 分支后面。问题是它只发生在你的代码仓库中，其他所有的开发者还在原来的 master 上工作。因为 rebase 引起了新的提交，Git 会认为你的 master 分支和其他人的 master 已经分叉了。 同步两个 master 分支的唯一办法是把它们 merge 到一起，导致一个额外的合并提交和两堆包含同样更改的提交。不用说，这会让人非常困惑。 所以，在你运行 git rebase 之前，一定要问问你自己「有没有别人正在这个分支上工作？」。如果答案是肯定的，那么把你的爪子放回去，重新找到一个无害的方式（如 git merge）来提交你的更改。不然的话，你可以随心所欲地重写历史。 5. rebae的本地清理功能在你工作流中使用 rebase 最好的用法之一就是清理本地正在开发的分支。隔一段时间执行一次交互式 rebase，你可以保证你 feature 分支中的每一个提交都是专注和有意义的。 调用 git rebase 的时候，你有两个基（base）可以选择：上游分支（比如 master）或者你 feature 分支中早先的一个提交。我们在「交互式 rebase」一节看到了第一种的例子。后一种在当你只需要修改最新几次提交时也很有用。比如说，下面的命令对最新的 3 次提交进行了交互式 rebase： 12git checkout featuregit rebase -i HEAD~3(或者第四个commit-id) 这样，就可以对本地提交历史中最新的三个提交进行重新整理了，包括提交合并，提交日志修改等等。 通过指定 HEAD~3 作为新的基提交，你实际上没有移动分支——你只是将之后的 3 次提交重写了。注意它不会把上游分支（master）的更改并入到 feature 分支中。 交互式 rebase 是在你工作流中引入 git rebase 的的好办法，因为它只影响本地分支。其他开发者只能看到你已经完成的结果，那就是一个非常整洁、易于追踪的分支历史。 追踪关系建立test仓库 并建立追踪关系 1$ git branck --track test origin/master 修改追踪关系 先切换到test 1$ git checkout test 修改追踪仓库（一定要先切换） 1$ git branch --set-upstream-to origin/master 建立追踪关系之后，本地分支名称和远程一样时，使用git push时不用带上远程名称，git pull也不用带上远程分支名 git冲突的修复1. 直接编辑冲突文件使用git pull –rebase经常会出现冲突 冲突产生后，文件系统中冲突了的文件里面的内容会显示为类似下面这样： 1234567&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD * test2 * test3======= * this is my modify, my be conflicked * test1000&gt;&gt;&gt;&gt;&gt;&gt;&gt; my_modify 其中：&lt;&lt;&lt;&lt;&lt;&lt;&lt;（7个&lt;）HEAD与=======之间的内容是remote上的修改，冲突标记=======与&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的内容是我的修改内容。 在这两者之间选择任何你需要的内容保留下来，并删除所有的===,&lt;&lt;&lt;,&gt;&gt;&gt;即可解决冲突，解决完成之后，git add -A, git rebase –continue就提交了代码 2. 利用图形界面工具解决冲突当然我们也可以利用图形工具解决冲突 如果要解决的冲突很多，且比较复杂，图形界面的冲突解决工具就显得很重要了。 执行git mergetool用预先配置的Meld(Beyond Compare)解决冲突： 上面左右两个窗口依次是“LOCAL”、“REMOTE”，它们只是提供解决冲突需要的信息，是无法编辑的。中间的窗口是合并后的结果，可以手动修改，也可以点击相应颜色的箭头选择“LOCAL”或者“REMOTE”。 如果不向解决冲突，回到之前状态，可执行： 1$ git rebase --abort 3. 代码提交完整流程步骤如下： git add -A git commit -m “message” git pull –rebase (或者git fetch + git rebase） 解决冲突 git add 冲突文件 git rebase –continue git push 其中，3、4、5点，如果没遇到冲突就不用进行，直接push上去。 当遇到冲突时，git会提示patch failed，并要我们解决问题了再执行git rebase –continue","categories":[],"tags":[]},{"title":"","slug":"技术笔记/概念知识点汇总/小知识点行业名词术语","date":"2019-09-12T08:32:36.610Z","updated":"2019-08-16T01:40:47.907Z","comments":true,"path":"2019/09/12/技术笔记/概念知识点汇总/小知识点行业名词术语/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/概念知识点汇总/小知识点行业名词术语/","excerpt":"","text":"E2E 端到端参考来源：前端E2E测试略解 e2e或者端到端（end-to-end）或者UI测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有UI会暴露给用户。 E2E（End To End）即端对端测试，属于黑盒测试，通过编写测试用例，自动化模拟用户操作，确保组件间通信正常，程序流数据传递如预期。 名称 断言 是否跨浏览器支持 实现 官网 是否开源 nightwatch assert 和 Chai Expect 是 selenium http://nightwatchjs.org/ 是 cypress Chai、Chai-jQuery 等 否 Chrome https://www.cypress.io/ 是 testcafe 自定义的断言 是 不是基于 selenium 实现 https://devexpress.github.io/testcafe/ 是 katalon TDD/BDD 是 未知 https://www.katalon.com/katalon-studio/ 否 nightwatch 需要安装配置 selenium，selenium-server需要安装jdk（Java Development Kit）。 cypress 安装方便，测试写法和单元测试一致，只支持 Chrome 类浏览器，有支持其他浏览器的计划 testcafe 安装方便，测试写法与之前的单元测试差异比较大，编写测试用例时只能选择到可见的元素 katalon 不是测试框架，是 IDE ，比较重，并且不开源，测试用例不是用 js 编写但是可以通过 Chrome 插件录测试用例 经过测试使用对比，nightwatch和cypress是vue推荐的框架，社区活跃度较高，功能较为完备，开源，推荐二选一（nightwatch需要装jdk，准备工作多，但API丰富度更高；cypress有自己的可视化窗体，能记录运行信息，重现bug精品） nightwatch 安装1npm i selenium-server nightwatch chromedriver -D chromedriver 安装需要翻墙，很坑，如果没梯子去网上搜罗单独的包，然后改配置文件 配置根目录新建nightwatch.conf.js（也可json，推荐js）：1234567891011121314151617181920212223242526272829303132333435363738394041 module.exports = &#123; // 测试文件入口 src_folders: ['tests'], // 输出报表路径 output_folder: 'reports', // selenium配置 selenium: &#123; start_process: true, server_path: require('selenium-server').path, host: '127.0.0.1', // selenium log输出 log_path: 'reports', port: 9090, cli_args: &#123; 'webdriver.chrome.driver': require('chromedriver').path, 'webdriver.gecko.driver': require('chromedriver').path &#125; &#125;, test_settings: &#123; default: &#123; launch_url: 'http://localhost', selenium_port: 9090, selenium_host: 'localhost', silent: true, screenshots: &#123; enabled: false, path: '' &#125; &#125;, chrome: &#123; desiredCapabilities: &#123; browserName: 'chrome', javascriptEnabled: true, acceptSslCerts: true &#125; &#125; &#125;&#125;; 3.测试用例新建tests文件夹，在里面新建test.js，内容如下： 123456789101112 module.exports = &#123; 'Demo test Baidu' : function (browser) &#123; browser .url('www.baidu.com') .waitForElementVisible('body', 1000) .setValue('input[name=wd]', 'NightWatch') .click('#su') .pause(1000) .assert.containsText('#container', 'NightWatch') .end(); &#125;&#125;; 运行①推荐在package.json中配置123 \"scripts\": &#123; \"test\": \"./node_modules/.bin/nightwatch --env\"&#125;, 就可以直接 npm test，也可以在shell中手动。②根目录新建entry.js（名字自起） 1require('nightwatch/bin/runner.js'); 之后shell中 node entry.js cypress1.安装 1npm install cypress --save-dev 启动1./node_modules/.bin/cypress open 可添加npm scripts 写测试用例1touch &#123;your_project&#125;/cypress/integration/simple_spec.js 123456789101112131415describe('My First Test', function() &#123; it(\"Gets, types and asserts\", function() &#123; cy.visit('https://example.cypress.io') cy.contains('type').click() // Should be on a new URL which includes '/commands/actions' cy.url().should('include', '/commands/actions') // Get an input, type into it and verify that the value has been updated cy.get('.action-email') .type('fake@email.com') .should('have.value', 'fake@email.com') &#125;)&#125;) Git，Github,gitlib,gitlab分别是什么 git 是一个版本管理软件，由linux之父花了三天搞出来的东西，他没有界面，只支持命令行。 github 是一个网站，因为git没有图形界面，github它支持在线的几乎所有git的操作，最重要它也是一个包含了很多程序员的开源社区。 gitlib 是用于实现git功能的开发库 githab 提倡开源，如果你不想开源就要花钱，你如果不愿意花钱，就自己搞个服务器，装gitlab这个软件来实现自己的版本控制，有点私服的概念。 作者：笑笑酱丶链接：https://www.jianshu.com/p/26fa7df41c9a来源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 前后端分离https://blog.csdn.net/fuzhongmin05/article/details/81591072 聚合工程聚合的概念 把项目的各个模块（子工程）聚合在一起构建。一般用于分模块开发,最后整体打包发布 Maven Project独立运行 Maven Module无法独立运行 聚合工程开发步骤 根项目是一个pom项目。 子模块：Maven Module 每个模块写完后需要上传到私服（略） 打包，需要整体打包找到最后的war项目使用Tomcat加载 实际中，我们会将一些庞大的项目拆分为若干模块进行开 三层+MVC 如下： 父工程maven-core所有的项目所需要的jar包都放在父工程的pom.xml下子工程model——-jar子工程dao———-jar子工程service——jar子工程web———-war注意：聚合打包时（install），选择父工程进行聚合发布到tomcat运行时（tomcat7:run）,选择web工程进行发布运行 工程聚合和继承的区别聚合是为了方便快速构件项目。对于聚合模块来说，它知道有哪些被聚合的模块，但那些模块不知道这个聚合模块的存在继承是为了消除重复配置。对于继承关系的父POM来说，它不知道有哪些子模块继承于它，但是子模块必须知道自己的父POM是什么; 聚合模块和微服务的区别聚合工程就是把一个工程分为各个部件,这些包括根项目pom可以用来控制依赖的版本号,实体类taobao-bean,持久层接口taobao-dao,业务层service:taobao-service,web层taobao-web.工具类taobao-utils等,可以分为这么多的模块平行开发,这些部件都不可以单独运行,它们之间相互依赖,最后合在一起成为一个完整可运行的web项目;而这个web项目就可以成为是一个微服务,微服务可以是一个聚合工程,也可以不是,只是选择要不要这么开发而已,当其他的微服务需要使用另一个微服务的实体类时,这个时候我们可以直接导入它的实体类坐标即可,不用再次创建,就好像吃饭,朋友已经买了勺子,我喝汤的时候既可以用一下喝一口汤,达到重复使用的目的 读写分离 编辑为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。· 敏捷开发 目前参与过公司的项目，公司专业从事敏捷开发，也比较成熟，可以分享下其中的细节。 概念，可以参考敏捷宣言，强调适应变化，四句指导 个体和互动 高于 流程和工具（动员每个人积极交流，相互之间可以 battle，头脑风暴）；工作的软件 高于 详尽的文档（好的代码是不需要注释和文档的，顶多有一些规范指南一类的在线协作文档）；客户合作 高于 合同谈判（真心实意为客户创造价值，而不止于眼前的功能交付，这个很难，由此还专门有一个角色去 control 这件事）；响应变化 高于 遵循计划（计划是赶不上变化的，随时改需求随时变动迭代计划，有迭代的概念）； 基于于右边，而更注重左边的价值，并不是说完全抛弃传统的瀑布式开发。 人员架构 因为公司没有所谓的各种领导，这里就说下交付组里，我所见的一些角色，也是每天在一起工作的小伙伴： PM：项目管理者，这里不是项目经理，负责和客户签合同，各种会议的组织者，没有项目经理那种权利BA：业务分析师，专门和客户谈需求，超强的交流和控制客户的能力，几乎每天都和客户泡在一起开会过需求，疯狂开会，驱动客户（我们组的BA是御姐型的，气场极强）QA：测试人员DEV：开发人员，其中有掌握技术话语权的 TL PO：比较特殊，是客户某的部门领导人，一般和 PM 单独沟通，几乎没出现过，网友一样的存在 一个团队一般 1 PM、1 BA、1 QA 、6 DEV (三前三后，至少两个TL) 这里没有 MS，所以每个人都是 SM，233333 会议 IPM：迭代会议，每个迭代开始之前开一次，主要是排下个迭代的故事卡，并给每张卡估点，我遇到的是两周一个迭代（一般会有卡墙，有物理的，也有线上的）Showcase：开发成果展示，每个迭代结束开一次，一般是BA或QA给客户演示上个迭代做的功能，当然也是优化和新改动提得最多的时候Retro：回顾会议，每个迭代结束开一次，讨论上个迭代团队做得好和做得不好的事（不是针对和人，不含人身攻击），并给出改进方案，在下个迭代中执行Stand Up：每天早上的站会，大家站成一圈，一般由 PM 主持，轮流阐述自己的昨天工作内容和工作进度，和今天要完成的工作，以及遇到的一些问题，及时反馈出来（我们组有个小龙猫的毛绒玩具，大家挨个传递，挨个阐述） 每天还有 Code Review，动态安排时间，我们团队一直坚持，刚开始是前后端一起过昨天每个人写的代码，后面时间太长，就前后端分开。大家一起来找茬，你的命名和代码逻辑划分，代码风格，都有个能会被挑刺。在相互找茬的过程中，坚持下去，对个人的成长有很大很大的帮助。 写代码 DEV 要做开发，就要先领故事卡，俗称开卡，自己选好一张故事卡，拉上BA和QA去过其中的细节，理清细节，然后才能上手开发，开发完后再拉上BA和QA去结卡，检查卡中的功能是不是都完成了，有问题就被打回去改，直到BA和QA觉得完善了，才能关卡。。。 代码质量要求很严格，遵循 TDD，前端有 lint，有单元测试（不能偷懒，而且有覆盖率要求），有 测试（必须写，和QA一起看），当你的代码走过这三个流程，提交到公共仓库，CI 自动构建会拉你的代码，再走一遍测试（挂了就要修代码），然后自动发布新版本到 Dev 环境。 你以为这就完了？还有代码嗅探器，时刻在扫描代码仓库，有两个重复的函数不行、重复率太高不行、使用了骚代码去做类型转换之类的不行、空间内有命名重叠不行…这一套下来，再加上 code review，菜鸟开发每天一半的时间都在改昨天的代码。项目还有规定，CI 不能红过夜，当天的问题当天要修好。 结语以上这些，小公司就别说什么没时间，项目吃紧，然后就没做，自求多福吧这些都是我所经历的，敏捷实践各不相同，大家看看就好SpringBoot、SpringCloud 全家桶要会，会点微服务，基础的 Java8 知识，熟练使用 stream 编程之类的，目前我们组的 Java 开发一半时间都是在写测试用例，要会写单元测试+集成测试之类的。","categories":[],"tags":[]},{"title":"","slug":"技术笔记/概念知识点汇总/Win命令+快捷键","date":"2019-09-12T08:32:36.609Z","updated":"2019-09-11T03:23:08.745Z","comments":true,"path":"2019/09/12/技术笔记/概念知识点汇总/Win命令+快捷键/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/概念知识点汇总/Win命令+快捷键/","excerpt":"","text":"DOS命令 当前所在文件路径：输入【set pa=%cd%】回车。继续，输入命令：【echo %pa%】回车了。![1565085234591](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565085234591.png) 清屏 cls 文件夹相关 创建文件夹使用 md 或mkdir 命令来创建，其中md和mkdir都是建立新目录make directory的意思，完整命令是md [盘符:][路径]新目录名，比如：md c:\\test\\myfolder； 删除文件夹使用 rd 或rmdir 命令来删除空文件夹(rd:remove directory)；使用命令 rd/s 或rmdir/s 命令删除文件夹(不管是否为空)，会提示是否删除，输入y才能删除；使用命令 rd/s/q 或rmdir/s/q 命令删除文件夹(不管是否为空)，可以直接删除(/q，即quiet，安静模式;/s:subdirectory,子目录)； 创建文件使用 cd&gt;a.txt，type nul&gt;a.txt，copy nul&gt;a.txt 三种方式创建空文件；用 echo [file content]&gt;a.txt 创建非空文件 删除文件使用del a.txt; 查看当前目录下的文件/文件夹 dir [/a] –查看当前文件夹下所有文件 以记事本的方式查看文件（注意不可编辑） type 文件名 例如（注意空格）：查看当前路径下的文件 type _config.yml 打开文件并编辑（注意空格） start _config.yml 总结注意事项Windows 快捷键 注意：本人 操作系统为Windows 10 Ctrl+W 关掉当前页面 Ctrl+Shift+T 恢复刚关掉的浏览器页面 Alt+F4 关闭应用 Windows+L 随手锁屏 Windows+↑ /Windows+↓ 调整页面占屏幕比例 Windows+M：最小化所有窗口 Alt+空格+N 最小化当前窗口 Windows+D 显示桌面 Windows+R 打开 运行 Windows+E 打开文件资源管理器 Alt+tab 切换不同已打开的应用 ctrl+PgUp/PgDown 同一应用内切换不同页面 windows+ ; 选择表情 windows+v 打开粘贴板 粘贴/复制等的就不写了吧，这些我个人用的总结下~","categories":[],"tags":[]},{"title":"","slug":"技术笔记/概念知识点汇总/LINUX学习快捷键+命令","date":"2019-09-12T08:32:36.608Z","updated":"2019-08-13T00:55:24.758Z","comments":true,"path":"2019/09/12/技术笔记/概念知识点汇总/LINUX学习快捷键+命令/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/概念知识点汇总/LINUX学习快捷键+命令/","excerpt":"","text":"Linux 英/ˈlɪnəks/ 美 /ˈlaɪnəks; ˈlɪnəks/ 当前文件夹路径 pwd 查看文件/文件夹列表 ls [-a|d|l] 新建文件夹 mkdir 新建文件夹并设置权限 mkdir -m [711|rwx–x–x] 文件夹名字 新建多级文件夹 mkdir -p ../jmptest/test1 移除空文件夹 rmdir 文件名 vim 编辑文本文件 文本文件保存退出 ？ esc+:wq Linux 文件基本属性Linux 文件基本属性","categories":[],"tags":[]},{"title":"","slug":"技术笔记/数据库/索引","date":"2019-09-12T08:32:36.604Z","updated":"2019-08-30T02:18:15.384Z","comments":true,"path":"2019/09/12/技术笔记/数据库/索引/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/数据库/索引/","excerpt":"","text":"索引索引作用在索引列上，除了有序查找之外，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。 创建索引​ 在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。 ALTER TABLE ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE table_name ADD INDEX index_name (column_list) ALTER TABLE table_name ADD UNIQUE (column_list) ALTER TABLE table_name ADD PRIMARY KEY (column_list) ​ 其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。 CREATE INDEX CREATE INDEX可对表增加普通索引或UNIQUE索引。 CREATE INDEX index_name ON table_name (column_list) CREATE UNIQUE INDEX index_name ON table_name (column_list) ​ table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。 3．索引类型 ​ 在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。 ​ PRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。 ​ 下面的SQL语句对students表在sid上添加PRIMARY KEY索引。 ALTER TABLE students ADD PRIMARY KEY (sid) 删除索引 ​ 可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。 DROP INDEX index_name ON talbe_name ALTER TABLE table_name DROP INDEX index_name ALTER TABLE table_name DROP PRIMARY KEY ​ 其中，前两条语句是等价的，删除掉table_name中的索引index_name。 ​ 第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。 ​ 如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。 查看索引 12mysql&gt; show index from tblname;mysql&gt; show keys from tblname; 什么情况下使用索引 表的主关键字 自动建立唯一索引 如zl_yhjbqk（用户基本情况）中的hbs_bh（户标识编号） 表的字段唯一约束 ORACLE利用索引来保证数据的完整性 如lc_hj（流程环节）中的lc_bh+hj_sx（流程编号+环节顺序） 直接条件查询的字段 在SQL中用于条件约束的字段 如zl_yhjbqk（用户基本情况）中的qc_bh（区册编号） 1select * from zl_yhjbqk where qc_bh=’7001’ 查询中与其它表关联的字段 字段常常建立了外键关系 如zl_ydcf（用电成份）中的jldb_bh（计量点表编号） 1select * from zl_ydcf a,zl_yhdb b where a.jldb_bh=b.jldb_bh and b.jldb_bh=’540100214511’ 查询中排序的字段 排序的字段如果通过索引去访问那将大大提高排序速度 12select * from zl_yhjbqk order by qc_bh（建立qc_bh索引）select * from zl_yhjbqk where qc_bh=’7001’ order by cb_sx （建立qc_bh+cb_sx索引，注：只是一个索引，其中包括qc_bh和cb_sx字段） 查询中统计或分组统计的字段 12select max(hbs_bh) from zl_yhjbqkselect qc_bh,count(*) from zl_yhjbqk group by qc_bh ## 什么情况下应不建或少建索引 表记录太少 如果一个表只有5条记录，采用索引去访问记录的话，那首先需访问索引表，再通过索引表访问数据表，一般索引表与数据表不在同一个数据块，这种情况下ORACLE至少要往返读取数据块两次。而不用索引的情况下ORACLE会将所有的数据一次读出，处理速度显然会比用索引快。 如表zl_sybm（使用部门）一般只有几条记录，除了主关键字外对任何一个字段建索引都不会产生性能优化，实际上如果对这个表进行了统计分析后ORACLE也不会用你建的索引，而是自动执行全表访问。如： 1select * from zl_sybm where sydw_bh=’5401’ （对sydw_bh建立索引不会产生性能优化） 经常插入、删除、修改的表 对一些经常处理的业务表应在查询允许的情况下尽量减少索引，如zl_yhbm，gc_dfss，gc_dfys，gc_fpdy等业务表。 数据重复且分布平均的表字段 假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么对这种表A字段建索引一般不会提高数据库的查询速度。 经常和主字段一块查询但主字段索引值比较多的表字段 如gc_dfss（电费实收）表经常按收费序号、户标识编号、抄表日期、电费发生年月、操作 标志来具体查询某一笔收款的情况，如果将所有的字段都建在一个索引里那将会增加数据的修改、插入、删除时间，从实际上分析一笔收款如果按收费序号索引就已 经将记录减少到只有几条，如果再按后面的几个字段索引查询将对性能不产生太大的影响。 对千万级MySQL数据库建立索引的事项及提高性能的手段 一、注意事项：首先，应当考虑表空间和磁盘空间是否足够。我们知道索引也是一种数据，在建立索引的时候势必也会占用大量表空间。因此在对一大表建立索引的时候首先应当考虑的是空间容量问题。 其次，在对建立索引的时候要对表进行加锁，因此应当注意操作在业务空闲的时候进行。 二、性能调整方面：首当其冲的考虑因素便是磁盘I/O。物理上，应当尽量把索引与数据分散到不同的磁盘上（不考虑阵列的情况）。逻辑上，数据表空间与索引表空间分开。这是在建索引时应当遵守的基本准则。 其次，我们知道，在建立索引的时候要对表进行全表的扫描工作，因此，应当考虑调大初始化参数db_file_multiblock_read_count的值。一般设置为32或更大。 再次，建立索引除了要进行全表扫描外同时还要对数据进行大量的排序操作，因此，应当调整排序区的大小。 ​ 9i之前，可以在session级别上加大sort_area_size的大小，比如设置为100m或者更大。 ​ 9i以后，如果初始化参数workarea_size_policy的值为TRUE，则排序区从pga_aggregate_target里自动分配获得。 最后，建立索引的时候，可以加上nologging选项。以减少在建立索引过程中产生的大量redo，从而提高执行的速度。 MySql在建立索引优化时需要注意的问题 设计好MySql的索引可以让你的数据库飞起来，大大的提高数据库效率。设计MySql索引的时候有一下几点注意： 创建索引 对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加 索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下 降。但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。 复合索引 比如有一条语句是这样的： 1select * from users where area=’beijing’ and age=22; 如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效 率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age, salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀 特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。 索引不会包含有NULL值的列 只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。 使用短索引 对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。 排序的索引问题 mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。 like语句操作 一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。 不要在列上进行运算 1select * from users where YEAR(adddate) 不使用NOT IN和操作 NOT IN和操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id3则可使用id&gt;3 or id","categories":[],"tags":[]},{"title":"","slug":"技术笔记/数据库/Java开发中数据库连接问题","date":"2019-09-12T08:32:36.603Z","updated":"2019-09-04T09:46:40.104Z","comments":true,"path":"2019/09/12/技术笔记/数据库/Java开发中数据库连接问题/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/数据库/Java开发中数据库连接问题/","excerpt":"","text":"连接MySQL数据库关于8.x版本的数据库连接信息——URL： com.mysql.jdbc.Driver 是 mysql-connector-java 5中的，com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6中的1、JDBC连接Mysql5 com.mysql.jdbc.Driver: 1234driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=falseusername=rootpassword= 2、JDBC连接Mysql6 com.mysql.cj.jdbc.Driver， 需要指定时区serverTimezone: 1234driverClassName=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=falseusername=rootpassword= 在设定时区的时候，如果设定serverTimezone=UTC，会比中国时间早8个小时，如果在中国，可以选择Asia/Shanghai或者Asia/Hongkong，例如： 1234driverClassName=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?serverTimezone=Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=falseusername=rootpassword= 备注： 如果mysql-connector-java用的6.0以上的，如下：123456&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;6.0.6&lt;/version&gt;&lt;/dependency&gt; 但是你的driver用的还是com.mysql.jdbc.Driver，就会报错： 1234Loading class &apos;com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is &apos;com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary. 此时需要把com.mysql.jdbc.Driver 改为com.mysql.cj.jdbc.Driver 还有一个警告：123456WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. 不推荐不使用服务器身份验证来建立SSL连接。如果未明确设置，MySQL 5.5.45+, 5.6.26+ and 5.7.6+版本默认要求建立SSL连接。为了符合当前不使用SSL连接的应用程序，verifyServerCertificate属性设置为’false’。如果你不需要使用SSL连接，你需要通过设置useSSL=false来显式禁用SSL连接。如果你需要用SSL连接，就要为服务器证书验证提供信任库，并设置useSSL=true。 SSL – Secure Sockets Layer（安全套接层）版权声明：本文为CSDN博主「Java-Basketball」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/superdangbo/article/details/78732700 填写说明以及 为什么这样写 serverTimezone 驱动包用的是mysql-connector-java-8.0.11.jar，8.x版本后，新版的驱动类改成了com.mysql.cj.jdbc.Driver新版驱动连接url也有所改动 指定时区UTC代表的是全球标准时间，我们所在的时区为东八区在标准的时间基础上加上8（注：东时区为正，西时区为负），UTC+8 ag. 北京时间： 2019-08-26 16:30:52 #=UTC+8国际标准时间：2019-08-26 08:30:52 1234//时区设置：东八区serverTimezone=GMT%2B8//或者使用上海时间serverTimezone=Asia/Shanghai 这个时区要设置好，不然我们在用java代码插入到数据库时间的时候会出现问题。比如在java代码里面插入的时间为：2019-06-24 17:29:56但是在数据库里面显示的时间却为：2019-06-24 09:29:56有了8个小时的时差 useUnicode=true&amp;characterEncoding=utf8 指定字符的编码、解码格式。 例如：mysql数据库用的是gbk编码，而项目数据库用的是utf-8编码。这时候如果添加了useUnicode=true&amp;characterEncoding=UTF-8 ，那么作用有如下两个方面： 存数据时：数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中。 取数据时：在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。注意：在xml配置文件中配置数据库utl时，要使用&amp;的转义字符也就是&amp; 1&lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/email?useUnicode=true&amp;amp;characterEncoding=UTF-8\" /&gt; aotoReconnect=true连接数据库超时设置autoReconnect=true(mysql5以上的，设置autoReconnect=true 是无效的 只有4.x版本，起作用) useSSL=[true|false] 新版本的MySQL要求是否进行ssl连接. MySQL在高版本需要指明是否进行SSL连接 https://blog.csdn.net/weixin_39845407/article/details/81708230 SSL协议提供服务主要： 1）认证用户服务器，确保数据发送到正确的服务器； . 2）加密数据，防止数据传输途中被窃取使用； 3）维护数据完整性，验证数据在传输过程中是否丢失； 当前支持SSL协议两层： SSL记录协议（SSL Record Protocol）：建立靠传输协议（TCP）高层协议提供数据封装、压缩、加密等基本功能支持 SSL握手协议（SSL Handshake Protocol）：建立SSL记录协议用于实际数据传输始前通讯双进行身份认证、协商加密 算法、 交换加密密钥等。 参数名称 参数说明 缺省值 最低版本要求 user 数据库用户名（用于连接数据库） 所有版本 password 用户密码（用于连接数据库） 所有版本 useUnicode 是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true false 1.1g characterEncoding 当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk false 1.1g autoReconnect 当数据库连接异常中断时，是否自动重新连接？ false 1.1 autoReconnectForPools 是否使用针对数据库连接池的重连策略 false 3.1.3 failOverReadOnly 自动重连成功后，连接是否设置为只读？ true 3.0.12 maxReconnects autoReconnect设置为true时，重试连接的次数 3 1.1 initialTimeout autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒 2 1.1 connectTimeout 和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本 0 3.0.1 socketTimeout socket操作（读写）超时，单位：毫秒。 0表示永不超时 0 3.0.1","categories":[],"tags":[]},{"title":"","slug":"技术笔记/实战/自建Blog","date":"2019-09-12T08:32:36.600Z","updated":"2019-08-08T10:02:57.239Z","comments":true,"path":"2019/09/12/技术笔记/实战/自建Blog/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/实战/自建Blog/","excerpt":"","text":"hexo 博客框架 自建静态博客 CodeSheep参考视频 环境准备 安装 GIT 安装 node.js:node,js download![1565082721207](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565082721207.png) 检查是否安装成功![1565083016444](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565083016444.png) 由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm* ![1565084247504](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565084247504.png) 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装 1hexo cnpm install -g hexo-cli ![1565084789098](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565084789098.png) 搭建启动部署博客 新建一个放置博客文件的专属文件夹，在命令行下将路径切换到文件夹所在路径 博客初始化 命令行输入 hexo init 【mac os 输入 sudo hexo init】 启动 hexo s ![1565144387885](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565144387885.png) 新建一篇文章 hexo n “我的第一篇博客文章.md” github 新建一个仓库 用户名.github.io jmp.github.io 安装cnpm插件 1cnpm install --save hexo-deployer-git 修改_config.yml文件，在文件底部这样修改![1565168436408](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565168436408.png) 123type: gitrepo: https://github.com/870727741/870727741.github.io.gitbranch: master 部署到远端 hexo d 博文用Markdown写，后缀名为.md，放在post文件夹里。每次写完，hexo g -d生成部署 更换blog主题 路径切换到blog文件夹下面 1&gt;git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置文件 blog/_config.ymlstart _config.yml 1234theme: yilia&gt;hexo c &gt;hexo g &gt;hexo s 总结注意事项 git,github,repositories所有用户名/账户名一致一一致！ 每行命令失败先检查当前行是否敲错，根据错误提示检查敲过的命令是否生效","categories":[],"tags":[]},{"title":"","slug":"技术笔记/实战/power_system_manager","date":"2019-09-12T08:32:36.599Z","updated":"2019-09-06T01:08:28.689Z","comments":true,"path":"2019/09/12/技术笔记/实战/power_system_manager/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/实战/power_system_manager/","excerpt":"","text":"power_system_manager中智电烨旗下电力设备管理工具——电路 前期准备项目转移设想将用Eclipse 开发的 普通的SSM+MySQL+jsp项目转换为 IntelliJ IDEA 开发的 Spring Boot集成 MyBatis+MySQL+JSP的MAVEN项目 开发环境 OS： Windows 10 DataBse: MySQL(Navicat Premium 12) IDE ：IntelliJ IDEA Start First —&gt; Spring InitializergroupId:power_system_manager打包方式：warmaven projectdescription: 中智电烨旗下电力设备管理工具初始化lib ![1567568033215](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567568033215.png) Two创建自述文档 README.md Three pom文件增加注释并添加部分需要的依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.7.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.zzdy&lt;/groupId&gt; &lt;artifactId&gt;power_system_manager&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;power_system_manager&lt;/name&gt; &lt;description&gt;中智电烨旗下电力设备管理工具&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--mybatis集成--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!--mysql驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--lombok--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!--集成jsp，需要打war包，所需要的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;version&gt;8.5.20&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--pagehelper--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--druid数据库连接池管理--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.16&lt;/version&gt; &lt;/dependency&gt; &lt;!-- simple-image --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;simpleimage&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- ezmorph:Simple java library for transforming an Object to another Object. --&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.ezmorph&lt;/groupId&gt; &lt;artifactId&gt;ezmorph&lt;/artifactId&gt; &lt;version&gt;1.0.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- gson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.8.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--maven项目packaging为war类型时，必须要加这个插件--&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;configuration&gt;&lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 整合JSP参考 SpringBoot Study2.md 热部署设置 devTools依赖已经引入 File–&gt;settings–&gt;Build,Ex…–&gt;Compiler–&gt; Buile project automatically Shift+Ctrl+Alt+/ –&gt;Registry–&gt; ![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) 设置网站图标 icon Favicon参考 SpringBoot Study.md application.properties配置文件配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647server.port=8080server.servlet.context-path=/power_system_manager#durid#8.0之后的新驱动名称，要求URL中必须配置时区spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driverspring.datasource.url= jdbc:mysql://192.168.0.130:3306/test_zzdy2?characterEncoding=utf-8&amp;useUnicode=true&amp;serverTimezone=GMT%2B8&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=tigerspring.datasource.type = com.alibaba.druid.pool.DruidDataSource# 下面为连接池的补充设置，应用到上面所有数据源中# 初始化大小，最小，最大spring.datasource.druid.initialSize=3spring.datasource.druid.minIdle=1spring.datasource.druid.maxActive=5# 配置获取连接等待超时的时间 , 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。spring.datasource.druid.maxWait=60000# 配置一个连接在池中最小生存的时间，单位是毫秒spring.datasource.druid.min-evictable-idle-time-millis=300000# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒spring.datasource.druid.time-between-eviction-runs-millis=60000#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用spring.datasource.druid.validation-query=SELECT &apos;x&apos; FROM DUAL# 建议配置为true，不影响性能，并且保证安全性。作用：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。spring.datasource.druid.test-while-idle=true# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。spring.datasource.druid.test-on-borrow=false# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能spring.datasource.druid.test-on-return=false# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。spring.datasource.druid.pool-prepared-statements=true#当大于0时，poolPreparedStatements自动触发修改为true。spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&apos;wall&apos;用于防火墙#spring.datasource.druid.filter-class-names=stat# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat日志用的filter:log4j 防御sql注入的filter:wall#spring.datasource.druid.filters=stat,wall,log4j# 通过connectProperties属性来打开mergeSql功能；慢SQL记录#spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000# 合并多个DruidDataSource的监控数据#spring.datasource.druid.useGlobalDataSourceStat=true#mybatis配置#mybatis.config-location=classpath:mybatis/mapper/*.xml#mybatis.mapper-locations=classpath:mybatis/mybatis-config.xml#mybatis.type-aliases-package= 创建测试Controller 123456789101112131415161718192021package com.zzdy.power_system_manager.testcontroller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;/** * SayHello.java * User: Monica Jia * Date: 2019/9/4 Time: 11:56 * Description: */@Controllerpublic class SayHello &#123; @RequestMapping(\"/\") @ResponseBody public String sayHello()&#123; return \"hello Monica!\" ; &#125;&#125; 转移login","categories":[],"tags":[]},{"title":"","slug":"技术笔记/实战/communityProject","date":"2019-09-12T08:32:36.598Z","updated":"2019-08-30T09:36:49.541Z","comments":true,"path":"2019/09/12/技术笔记/实战/communityProject/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/实战/communityProject/","excerpt":"","text":"中心主题用到的技术 SpringBoot Spring MVC IDEA/Shutcut Refactor Source Code Git/GitHub BootStrap Github Authorization Properties Session &amp; Cookies MySQL/H2 MyBatis heroku 国外 部署 Maven Distribution Session 分布式session 何时何地重启服务都不会影响用户登录 Flyway 持续的数据库脚本跟新 lombok Dev Tools 热部署 Pagination 数据库分页 Interceptor 拦截器 MBG MyBatis Generator 数据库快速生产 Exception Handler Restful/JSON 前后端分离地做JSON Mark Down Image Upload Logging Profile Deploy项目实施新建工程 new project Spring Initializar ![1565849992477](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565849992477.png)Group :域名倒序排列dependencies :web 后面需要什么手动输入pom文件引入依赖 thymeleaf（https://spring.io/guides） 和 dev-tools（热部署^1，） 12345&gt;&lt;dependency&gt; &gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&gt;&lt;/dependency&gt;&gt; 在pom.xml中添加以下配置 12345&gt; &lt;dependency&gt;&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&gt; &lt;/dependency&gt;&gt; 注意：IDEA进行SpringBoot热部署失败的原因出现失败，原因可能不是部署配置问题，其原因是因为IntelliJ IDEA 默认情况下不会自动&gt;编译，需要对IEDA进行自动编译的设置，如下： （1）File–&gt;Setting–&gt;compiler –&gt;build project automatically（2）Shift+Ctrl+Alt+/ –&gt;Registry–&gt;![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) 建立gitHub仓库，上传代码 https://github.com/870727741/code_community 新建gitHub空白仓库 –&gt;Setting–&gt;Deploy keys 部署key 公钥/私钥？ 建立本地代码仓库并提交到github 打开终端 terminal 12345678910set pa=%cd%echo %pa% #查看当前路径git initgit status ##查看所有文件状态，红色未提交git add . ##此操作前先检查忽略文件git commit -m \"init repo\"git status git loggit remote add origin https://github.com/870727741/code_community.gitgit push -u origin master 创建README.md （自述文件） 更新本地仓库并推送到远端12345678git add.git statusgit commit -m \"自述文档\" #-m 意思是添加注释？##commit 之后又修改了一小部分，用下列命令git add .git commit --amend --no-edit #--amend 追加## 最后再推送git push 前端/交互界面/web端界面设计参考网站：中文社区 引入BootStrap 下载BootStrap开发文档 https://v3.bootcss.com/ 在html 文件中引入 bootstrap css js 文件(IDEA 中可以直接将文件拖入HTML 中)1234&lt;link rel=\"stylesheet\" href=\"css/bootstrap.min.css\"/&gt;&lt;link rel=\"stylesheet\" href=\"css/bootstrap-theme.min.css\"/&gt;...&lt;scripyt src=\"js/bootstrap.min.js\" &gt; 页面设计编写 首页导航栏 功能登录功能 之授权登录 github授权登录 https://developer.github.com/apps/ 下载 Visual Paradigm https://www.visual-paradigm.com 绘制时序图，熟悉流程![1565868239209](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565868239209.png) 3.整体结构 ![1566444583201](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566444583201.png) 配置的分离1234## gitHub授权用到的相关配置github.client_id=a273d1897ea2a1e6fc29github.client_secret=d3f308353a0cf47ffa44c6e605e6ccdc5ef18aacgithub.redirect_uri=http://localhost:8080/callback 1234567891011@Controllerpublic class AuthorizeController &#123; @Autowired private GitHubProvider gitHubProvider; @Value(\"$&#123;github.client_id&#125;\") private String client_id; @Value(\"$&#123;github.client_secret&#125;\") private String client_secret; @Value(\"$&#123;github.redirect_uri&#125;\") private String redirect_uri; ... Session 和 Cookies原理和实现12345678910// HttpServletRequest requestGitHubUser githubUser=gitHubProvider.getGitHubUser(accessToken);if(githubUser !=null )&#123;//登陆成功，写cookie 和sessionrequest.getSession().setAttribute(\"githubUser\",githubUser);return \"redirect:index\";&#125;else&#123;//登录失败，重新登陆return \"redirect:index\";&#125; ServletContext HttpSession 以及HttpServletRequest之间的关系: [共同点]不管对象的作用域怎样，共享变量和获得变量的 方法都是一致的–setAttribute(“varName”,obj);–getAttribute（“varName”）。 变量的作用域ServletContext–范围最大。应用程序级别的，整个应用程序都能訪问HttpSession – 次之，会话级别的，在当前的浏览器中都能訪问[不论是在同一浏览器开多少窗体，都能够訪问]。可是换个浏览器就不行了。就必须又一次创建sessionHttpServletRequest –范围最小，请求级别，请求结束，变量的作用域也结束[也就是仅仅是一次訪问，訪问结束，这个也结束] 数据库学习与了解MySQLH2 Database Engine 内嵌式数据库 依赖配置Maven仓库—&gt;H2 copy dependency –&gt;pom.xml 12345678&gt;&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;&gt;&lt;dependency&gt;&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt;&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt;&gt; &lt;version&gt;1.4.199&lt;/version&gt;&gt; &lt;scope&gt;test&lt;/scope&gt;&gt;&lt;/dependency&gt;&gt; 在IntelliJ IDEA中创建数据库 官方 quickstart Add the h2*.jar to the classpath (H2 does not have any dependencies) Use the JDBC driver class: org.h2.Driver The database URL jdbc:h2:~/test opens the database test in your user home directory A new database is automatically created 将h2*.jar添加到类路径(h2没有任何依赖项)使用JDBC驱动程序类:org.h2.Driver数据库URL jdbc:h2:~/test打开用户主目录中的数据库测试将自动创建一个新数据库 打开IntelliJ IDEA 右侧 Database–&gt;“+”–&gt;dataSource–&gt;H2 url–&gt;jdbc:h2:~/code_community 选择 Embedded ：内嵌式数据库 创建数据库表格![1566469417961](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1566469417961.png) token:存放cookie uuid形式gmt_creat【modifued】:格林威治时间戳形式 集成mybatis 并实现CURD操作参考文档 浏览器搜索 spring boot mybatis，查看官方mybatis集成文档。 参考spring boot官方文档 pom.xml添加相关依赖 pom.xml 1234567891011121314151617&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.15&lt;/version&gt;&lt;/dependency&gt;&lt;!--jdbc依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--集成mybatis--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt;&lt;dependency&gt; 配置properties相关数据库数据源信息 1234spring.datasource.url=jdbc:mysql://localhost/test[jdbc:h2:~/code_community][jdbc:mysql:~/code_community]spring.datasource.username=root[sa]spring.datasource.password=root[123]spring.datasource.diver-class-name=com.mysql.jdbc.Diver[org.h2.Diver] 编写 Mapper 123456@Mapperpubic interface UserMapper&#123; @Insert(insert into code_community_user(name,account_id,token,gmt_create,gmt_modified)values(#&#123;name&#125;,#&#123;accountId&#125;,#&#123;token&#125;,#&#123;gmtCreate&#125;,#&#123;gmtModified&#125;)) void addUser(CodeCommunityUser codeCommunityUser); &#125; 123456789@Datapubic class CodeCommunityUser&#123; private Integer id; private String name; private String accountId; private String token; private Long gmtCreate; private Long gmtModified;&#125; 控制层获取到信息后添加到数据库 Flyway Migration数据库版本控制工具 编写问题发布页面（仿照中文网）后端建表![1567157035331](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567157035331.png)","categories":[],"tags":[]},{"title":"","slug":"技术笔记/miniBug/miniBug数据库","date":"2019-09-12T08:32:36.595Z","updated":"2019-08-13T08:59:26.702Z","comments":true,"path":"2019/09/12/技术笔记/miniBug/miniBug数据库/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/miniBug/miniBug数据库/","excerpt":"","text":"mysql版本过高时，需要在url后面加一句：useSSL=true 1url=jdbc:mysql://localhost:3306/abc?racterEncoding=utf-8&amp;useSSL=true","categories":[],"tags":[]},{"title":"","slug":"技术笔记/miniBug/Javabug","date":"2019-09-12T08:32:36.593Z","updated":"2019-09-04T06:44:34.209Z","comments":true,"path":"2019/09/12/技术笔记/miniBug/Javabug/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/miniBug/Javabug/","excerpt":"","text":"SpringBooT Maven 开发时出现以下问题：Description:Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver class 原因：集成了数据库连接依赖，却没有配置数据库相关的连接信息 解决方案：在配置文件中配置数据库连接信息即可","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/面向对象编程","date":"2019-09-12T08:32:36.591Z","updated":"2019-08-16T01:37:25.237Z","comments":true,"path":"2019/09/12/技术笔记/java/面向对象编程/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/面向对象编程/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/性能优化","date":"2019-09-12T08:32:36.590Z","updated":"2019-08-16T01:35:59.876Z","comments":true,"path":"2019/09/12/技术笔记/java/性能优化/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/性能优化/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/多线程","date":"2019-09-12T08:32:36.588Z","updated":"2019-08-16T01:35:39.042Z","comments":true,"path":"2019/09/12/技术笔记/java/多线程/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/多线程/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/SpringBoot Study2","date":"2019-09-12T08:32:36.588Z","updated":"2019-09-12T07:23:06.640Z","comments":true,"path":"2019/09/12/技术笔记/java/SpringBoot Study2/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/SpringBoot Study2/","excerpt":"","text":"SpringBoot 千峰Java @Controller与@RestController,@ResponseBody RestFul风格的语法* 控制类上面添加@RestController或者控制层的方法上添加@ResponseBody，代表可以使用Restful风格的语法，如果返回值为String,则返回为Restful风格的字符串，而不进行跳转 如果方法上没有@ResponseBody注解或者类上面注解是Controller，则返回的字符串为将要跳转的页面的名称 ![1567483656153](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567483656153.png) 14~18日志管理logbacklog4j19配置工程为开发模式/热部署模式21静态资源的访问22消息转化器（SpringBoot默认已配置） 只需要在类中添加消息转换器的@Bean，就会被SpringBoot自动添加到容器中。 1234567891011//定义消息转换器@Beanpublic StringHttpMessageConverter stringHttpMessageConverter()&#123; StringHttpMessageConverter converter=new StringHttpMessageConverter(Charset.forName(\"UTF-8\")); return converter;&#125;@RequestMapping(\"/test\")@ResponseBody //此注解告诉方法返回的为Restful风格的字符串，不进行页面跳转public String test()&#123; return \"Hello 你好\"；&#125; 23使用FastJson解析Json数据* SpringBoot默认配置的是Jackson 自定义Json解析工具fastjso 引入依赖 123456&lt;!--fastjson的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.15&lt;/version&gt;&lt;/dependency&gt; 配置FastJson 第一种 (1). 让启动类继承WebMvcConfigurerAdapter (2). 重写configureMessageConverters方法 (3). 注入FastJson——重写的方法内创建fastjson消息转换器 (4). 创建Fastjson的配置对象，格式化JSON对象 (5). 将配置设置给消息转换器 (6). 将转换器加入到容器的转换器集合中 服务端响应时编码/乱码解决： 1spring.http.encoding.force=true ![1567391468652](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567391468652.png) 第二种 ![1567391642911](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567391642911.png) 24自定义拦截器* 创建放置拦截器的包 12345678910111213@Configuration//声明这是一个配置public class MyInterceptor extends WebMvcConfigurerAdapter&#123; //1 继承WebMvcConfigurerAdapter //2 重写addInterceptors方法 @Override public void addInterceptors(InterceptorRegistry registry)&#123; HandlerInterceptor interceptor=new HandlerInterceptor()&#123; //重写匿名内部类 &#125; //注册拦截器并添加拦截路径 registry.addInterceptor(interceptor).addPathPatterns(\"/**\"); &#125;&#125; 25定义全局异常处理器 AOP思想 创建一个全局异常处理类，如下 1234567891011@ControllerAdvicepublic class GlobalExceptionHandler&#123; @ExceptionHandler(Exception.class) @ResponseBody public Map&lt;String,Object&gt; handlerException(Exception exception)&#123; Map&lt;String,Object&gt; map=new HashMap&lt;&gt;(); map.put(\"errorCode\",500); map,put(\"errorMsg\", exception.toString()); return map; &#125;&#125; 26异步调用 启动类添加@EnableAsynac开启异步调用 Service层中的异步方法添加@Async注解 SpringBoot 整合JSPspringBoot不建议使用jsp,使用模板引擎，如Thymeleaf,freemarker 12345678910111213141516171819202122232425262728293031323334&lt;!--SpringBoot整合jsp，需要是war工程，另外需要依赖两个包--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jsper&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--https://mvnrepository.com/artifact/javax.servlet/jstl --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--标签库 https://mvnrepository.com/artifact/taglibs/standard --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt;&lt;!--maven项目packaging为war类型时，必须要加这个插件--&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;configuration&gt;&lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 新建文件结构如下： ProjectStructure–&gt;Modules–&gt; + –&gt;Web—&gt;设置webapp为Web资源文件夹 ![1567669146224](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567669146224.png) 123#配置前缀和后缀spring.mvc.view.prefix=/WEB-INF/jspspring.mvc.view.suffix=.jsp SpringBoot整合Thymeleaf 291234&lt;ddpendency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/ddpendency&gt; 12345678910111213141516#关闭thymeleaf缓存，开发时使用，否则没有实时画面spring.thymeleaf.cache=false#检查模板是否存在，然后再呈现spring.thymeleaf.check-template-location=true#Content-Type 值spring.thymeleaf.content-type=text/html#启用MVC thymeleaf视图分辨率spring.thymeleaf.enabled=true#应该从解决方案中排除的视图名称的逗号分割列表spring.thymeleaf.excluded-view-names=#模板编码spring.thymeleaf.mode=LEGACYHTML5#在构建URL时预先查看名称的前缀spring.thymeleaf.prxfix=classpath:/template/#构建URL时后缀spring.thymeleaf.suffix=.html SpringBoot整合JdbcTemplate 3112345678910&lt;!--spring整合JdbcTemplate--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--mysql依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 连接数据库的配置： 1234spring.datasource.diver-class-name=com.mysql.jdbc.Diverspring.datasource.username=rootspring.datasource.password=rootspring.datasource.url=jdbc:mysql//localhost:3306/db1 Spring整合Mybatis 配置式 3212345678910111213141516171819202122232425262728&lt;!--spring整合mybatis--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybstis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--mysql依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--alibaba的druid数据库连接池--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.11&lt;/version&gt;&lt;/dependency&gt;&lt;!--分页插件--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt; mybatis-config.xml 12 application.yml ： 12345678910111213141516171819202122232425262728293031323334#druid数据源配置spring: datasource: name: test url: jdbc:mysql://127.0.0.1:3306/db1 username: root password: root type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.jdbc.Driver filters: stat maxActive: 20 initialSize: 1 maxWait: 60000 minIdle: 1 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: select 'x' testWhileIdle: true testOnBorrow: false poolPreparedStatements: true maxOpenPreparedStatements: 20 #mybatis配置mybatis: mapper-locations: classpath:mybatis/mapper/*.xml config-location: classpath:mybatis/mybatis-config.xml #type-aliases-package: go.jmp.pojo #分页插件的配置pagehelper: helperDialect: mysql reasonable: true supportMethodArguments: true params: count=countSql pagehelper的使用可参考官方文档启动类添加包扫描注解 12@SpringBootApplication(scanBasePackages=\"go.jmp\")@MapperScan(\"go.jmp.mapper\") Spring整合Mybatis 注解式 33mybatis,mysql依赖引入 1234public interface UsersMapper&#123; @Select(\"select * from users where name=#&#123;name&#125;\") Users findUserByName(@Param(\"name\")String name);&#125; 区分多数据源分包，分类管理 mybatis,mysql依赖引入 连接数据库的配置： 12345678910#db1 数据库配置spring.datasource.db1.diver-class-name=com.mysql.jdbc.Diverspring.datasource.db1.username=rootspring.datasource.db1.password=rootspring.datasource.db1.url=jdbc:mysql//localhost:3306/db1#db2 数据库配置spring.datasource.db2.diver-class-name=com.mysql.jdbc.Diverspring.datasource.db2.username=rootspring.datasource.db2.password=rootspring.datasource.db2.url=jdbc:mysql//localhost:3306/db2 创建DataSource管理类，@Primary 指定默认的数据源，指定Mapper扫描包，并注入Spring容器 Mapper类指定数据源 1234@Qualifier(\"db1SqlSessionFactory\")public interface UserMapper&#123; ....&#125; 1234@Qualifier(\"db2SqlSessionFactory\")public interface UserMapper&#123; ....&#125; SpringBoot事务管理 36Service层的方法上添加事务管理注解 @Transactional SpringBoot整合Email12345&lt;!--邮件依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 全局配置文件： 1234567#JavaMailSender 邮件发送的配置 38spring.mail.host=smtp.qq.com #[smtp.163.com]spring.mail.username=kyrd@qq.comspring.mail.password=???? #授权码spring.mail.properties.mail.smtp.starttls.enable=truespring.mail.properties.mail.smtp.starttls.required=true#qq邮箱-&gt;设置-&gt;账户-&gt;POP3/SMTP服务：开启服务后会获取QQ授权码 出现认证失败的解决方案：因为JDK1.8中jre/lib/security中两个JAR包替换的缘故。 将下载后的local_policy.jar和US_export_policy.jar替换到JDK1.8的jre/lib/security文件夹即可 简单邮件的发送–EmailConfig 12345@Datapublic class EmailConfig &#123; @Value(\"$&#123;spring.mail.username&#125;\") private String emailFrom;&#125; 简单邮件的发送–service实现类 123456789101112131415161718@Servicepublic class EmailServiceImpl implements EmailService &#123; @Autowired private EmailConfig emailConfig; @Autowired private JavaMailSender mailSender; @Override public void sendSimpleMail(String sendTo,String title,String content)&#123; //简单邮件的发送 SimpleMailMessage message=new SimpleMailMailMessage(); message.setFrom(emailConfig.getEmailFrom); message.setTo(sendTo); message.setSubject(title); message.setText(content); mailSender.send(message); &#125;&#125; 简单邮件的发送–controller 12345678910@Contrllerpublic class EmailController&#123; @Autowired private EmailService emailService; @RequestMapping(/Simple) public String sendSimpleEmail()&#123; emailService.sendSimpleMail(\"kyrd@qq.com\",\"你好\"，\"很高兴认识你\"); return \"success\"; &#125;&#125; 实现发送带附件的邮件 39 service 12345678910111213141516//发送带附件的邮件@Overridepublic void sendAttachmentMail(String sendTo,String title,String content,File file )&#123; MimeMessage msg=mailSender.createMimeMessage(); try&#123; MimeMessageHelper helpr=new MimeMessageHelper(msg,true); helper.setFrom(emailConfig.getEmailFrom()); helper.setTo(sendTo); helper.setSubject(title); helper.setText(content); FileSystemResource r=new FileSystemResource(file); helper.addAttachment(\"附件\",r); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125;&#125; 实现发送模板邮件 40添加依赖： 12345678910&lt;!--邮件依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--freemarker---&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt; service 12345678public interface EmailService&#123; //发送简单的邮件 void sendSimpleMail(String sendTo,String title,String content); //发送带附件的邮件 void sendAttachmentMail(String sendTo,String title,String content,File file ); //发送模板邮件 void sendTempalateMail(String sendTo,String title,String info);&#125; 1234567891011121314151617181920212223@Autowiredprivate FreeMarkerConfigurer freeMarkerConfig;//发送模板邮件@Overridepublic void sendTemplateMail(String sendTo,String title,String info)&#123; MimeMessage msg=mailSender.creareMimeMessage(); try&#123; MimeMessageHelper helpler=new MimeMessageHelper(msg,true); helper.setFrom(emailConfig.getEmailFrom()); helper.setTo(sendTo); helper.setSubject(title); //封装模板需要的数据 Map&lt;String，Object&gt; model=new HashMap&lt;&gt;(); model.put(\"username\",\"小红\"); //得到模板 Tempalte tempalte =freeMarkerConfig.getConfiguration().getTemplate(info); String html = FreeMarkerTemplateUntils.processTempalteIntoString(tempalte,model); helper.setText(html,true); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; mailSender.send(msg);&#125; controller 12345678910@Contrllerpublic class EmailController&#123; @Autowired private EmailService emailService; @RequestMapping(/Simple) public String sendSimpleEmail()&#123; emailService.sendTempalateMail(\"kyrd@qq.com\",\"你好\"，info.html); return \"success\"; &#125;&#125; info.html 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;模板邮件发送测试&lt;/title&gt; &lt;/head&gt; &lt;body&gt; $&#123;username&#125; &lt;/body&gt;&lt;/html&gt; 实现文件上传 41 依赖 12345678910&lt;!--spring boot web支持--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--thymeleaf模板依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; properties 1234#上传单个文件大小的限制multipart.maxFileSize=500Mb#上传的所有文件的总大小限制multipart.maxRequestSize=500Mb html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;hr/&gt; &lt;form method=\"POST\" enctype=\"multipart/form-data\" action=\"/upload\"&gt; &lt;p&gt; 文件&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=\"submit\" value=\"上传\"/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; ![1567763803912](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567763803912.png) ![1567763819481](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567763819481.png) 文件批量上传 html 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;hr/&gt; &lt;form method=\"POST\" enctype=\"multipart/form-data\" action=\"/upload/batch\"&gt; &lt;p&gt; 文件1:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; 文件2:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; 文件3:&lt;input type=\"file\" name=\"file\"/&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=\"submit\" value=\"上传\"/&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Controller ![1567815310149](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815310149.png) ![1567815287069](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815287069.png) ![1567815243675](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567815243675.png) Neo4j 图形数据库12345&lt;dependency&gt;&lt;groupId&gt; &lt;/groupId&gt;&lt;/dependency&gt;","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/SpringBoot Study","date":"2019-09-12T08:32:36.586Z","updated":"2019-09-12T03:26:01.479Z","comments":true,"path":"2019/09/12/技术笔记/java/SpringBoot Study/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/SpringBoot Study/","excerpt":"","text":"SpringBoot基础学习目标 能够理解SpringBoot的 优缺点 能够理解SpringBoot的 特点 能够理解SpringBoot的 核心功能 能够配置SpringBoot的环境 能够完成application.propertoes文件的配置 能够完成application.yml文件的配置 能够使用SpringBoot集成MyBatis 能够使用SpringBoot集成Junit SpringData JPA Spring 的优点分析 Spring是java企业版（JEE）的轻量级代替品；无需开发重量级的Enterprise JavaBean(EJB),Spring通过依赖注入和面向切面编程；用简单的Java对象（Plain Old Java Object ,POJO）实现了EJB的功能。 Spring 的缺点分析重量级的配置。Spring2.5引入了基于注解的组件扫描，消除了大量基于应用程序自身组件的XML配置；Spring3.0引入了基于JAVA的配置，这是一种类型安全可重构配置方式；以代替 XML。项目的依赖管理。环境搭建搭建时，需要分析导入哪些库的坐标以及与之有依赖库的坐标；依赖版本选错；产生兼容问题。SpringBoot基于约定优于配置的思想，对上述缺点进行了改善和优化。 SpringBoot 的特点 基于Spring开发的快速入门体验 开箱即用；无代码生成，无需配置XML；可以修改默认值满足特定需求 提供了一些大型项目中常见的非功能性特性；如嵌入式服务器，安全 指标，健康监测，外部配置等 SpringBoot不是对于Spring功能上的增强；而是提供了一种快速使用Spring的方式##SpringBoot的核心功能 起步依赖起步依赖本质上是一个Maven项目对象模型（Project Object Model,POM）,定义了对其他库的传递依赖；这些东西加在一起支持某项功能。简而言之，起步依赖是讲具有某种功能的坐标打包到一起，提供一些默认的功能。 自动配置SpringBoot的自动配置是一个运行时的过程SpringBoot 快速入门代码实现 创建Maven工程 添加SpringBoot起步依赖![1565404627177](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565404627177.png) SpringBoot要求，项目要继承SpringBoot的起步依赖 spring-boot-start-parent springboot_quick.iml–&gt;project–&gt;parent 123456&lt;!--所有的springBoot都必须集成--&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring.boot.starter.parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;&lt;/parent&gt; SpringBoot 要集成SpringMVC进行Controller,所以项目要导入web的启动依赖 springboot_quick.iml–&gt;project–&gt;dependencies 1234567&lt;!--web功能起步依赖--&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 编写SpringBoot的引导类 要通过SpringBoot提供的引导类起步SpringBoot才可以访问 新建Class java–&gt;新建 class com.jmp.MySpringApplication//main 方法是java程序的入口//run方法 表示运行SpringBoot的引导类main–&gt;SpringApplication.run(MyApplication.class)类注解 : @SpringBootApplication //声明该类是SpringBoot的一个引导类 编写Controller 新建Class java–&gt;新建 class com.jmp.controller.XXXController 1234567891011&gt;&gt;&gt;&gt;@Controller&gt;&gt;public class XXXController&#125;&#123;&gt;&gt;&gt;&gt; @RequestMapping(\"/sayHello\")&gt;&gt; @ResponseBody&gt;&gt; public String sayHello()&#123;&gt;&gt; return \"hello world!\";&gt;&gt; &#125;&gt;&gt;&#125;&gt;&gt; 类注解 : @Cotroller 测试访问localhost:8080/sayHello 快速入门解析Spring代码解析注解和配置解析，看书籍网络学习 SpringBoot工程热部署热部署：修改代码后不重启即可生效 在pom.xml中添加以下配置 12345&gt;&lt;dependency&gt;&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&gt;&lt;/dependency&gt;&gt; 注意：IDEA进行SpringBoot热部署失败的原因出现失败，原因可能不是部署配置问题，其原因是因为IntelliJ IDEA 默认情况下不会自动&gt;编译，需要对IEDA进行自动编译的设置，如下： （1）File–&gt;settings–&gt;Build,Ex…–&gt;Compiler–&gt; Buile project automatically （2）Shift+Ctrl+Alt+/ –&gt;Registry–&gt;![1565420132437](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565420132437.png) SpringBoot 原理分析起步依赖原理分析SpringBoot 配置文件application*.yml/yaml/properties ![1565428258216](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565428258216.png) WEB应用名/工程名配置 .properties文件中12345##WEB应用名/工程名配置 .properties文件中server.port=8080server.context-path=/demo#！！spring boot2.0之后，上下文的配置改为了server.servlet.context-pathserver.servlet.context-path=/demo application.yml配置文件很多编程语言支持yml库。yml文件以数据为核心，语法更加简洁 语法 key: value //注意，value前有空格1name: Moniac Jia 配置普通数据1name: Moniac Jia 配置对象数据、12345678910person: ##空格 name: 张三 age: 18 addr: beijingserver: port: 8081 ##工程/项目名称配置 servlet.context-path: /demp##行内对象配置（用的较少 ）person: &#123;name: zhangsan ,age: 18,addr: beijing&#125; 配置集合（List、Set）数据1234567891011121314151617##普通字符串city: - beijing - tianjian - chongqing - shanghai##对象数据student: - name: tom age: 15 addr: beijing - name: lucy age: 18 addr: tianjing### 行内对象配置（用的较少 ）city: [beingjing,tianjing,chongqing,shanghai]student: [&#123;name: tom,age: 20&#125;,&#123;tname: Anne,age: 80&#125;,&#123;name: lucy,age: 18&#125;] 配置文件与配置类的属性映射方式使用注解@Vlue映射1234567891011121314@Controllerpublic claa XXXController&#125;&#123; @Value(\"$&#123;person.age&#125;\") private int age; @Value(\"$&#123;person.name&#125;\") private String name; @RequestMapping(\"/sayHello\") @ResponseBody public String sayHello()&#123; return \"hello world!\"; &#125;&#125; 使用注解@ConfigurationProperties映射类型安全配置 12345678910111213@Controller@ConfigurationProperties（prefix= \"person\"）public claa XXXController&#125;&#123; private int age; private String name; @RequestMapping(\"/sayHello\") @ResponseBody public String sayHello()&#123; return \"hello world!\"; &#125; //需要属性的GET SET方法&#125; pom.xml配置 123456&lt;!--@ConfigurationProperties的执行器配置--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; SpringBoot与其 他技术整合SpringBoot整合MyBatis添加MyBatis起步依赖123456&lt;!--MyBatis起步依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt; 添加数据库驱动坐标123456&lt;!--MySQL连接驱动--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt; application.properties添加数据库连接信息![1565581598534](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565581598534.png) 查找–&gt;datasource.username 12345#DB Configuration:spring.datasource.diverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8spring.datasource.username=rootspring.datasource.password=root 创建实体Bean![1565598910070](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565598910070.png) 编写 Mapper1234@Mapperpublic interface UserMapper&#123; public List&lt;User&gt; queryUserList();&#125; 配置Mapper映射文件 src–&gt;main–&gt;resource–&gt;mdir mapper(floder)–&gt;UserMapper.xml![1565591511065](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565591511065.png) 在application.properties中添加MyBatis的信息12345#Sprimg集成MyBatis环境#pojo别名扫描包mybatis.type-aliases-package=com.jmp.[entity|pojo|domin|model]#mybatis映射文件mybatis.mapper.locations=classpath:mapper/*Mapper.xml 编写测试Controller123456789@Controllerpublic class UserController&#123; @Autowired private UserMapper userMapper; public List&lt;User&gt; queryUserList()&#123; List&lt;User&gt; users=userMapper.queryUserList(); return users; &#125;&#125; SpringBoot整合Junit添加Junit起步依赖(SpringBoot默认已导入 )123456&lt;!--测试的起步依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 编写测试类![1565598334648](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565598334648.png) 123456789101112@RunWith(SpringRunner.class)@SpringBootTest(class=SpringbootMybatisApplication.claa)public class Mybatistest&#123; //控制台打印信息 @Autowired private UserMapper userMapper; @Test public void test()&#123; List&lt;User&gt; users=userMapper.queryUserList(); System.out.println(users); &#125;&#125; SpringBoot整合Spring Data JPASpringBoot整合Redis添加Redis起步依赖12345&lt;!--配置Redis启动器--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 在application.properties中配置Redis的连接信息 启动Redis服务![1565599749544](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565599749544.png) ![1565599799618](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565599799618.png) 123#Redisspring.redis.host=127.0.0.1spring.redis.port=6397 注入RedisTemplate测试redis操作注解——解析lombok 标签@Data @AllArgsConstructor @@NoArgsConstructor -如何去除get，set方法。@Data注解和如何使用，lombok 在代码中我们可以只加上标签@Data 而不用get,set方法； val : 和 scala 中 val 同名, 可以在运行时确定类型; @NonNull : 注解在参数上, 如果该类参数为 null , 就会报出异常, throw new NullPointException(参数名) @Cleanup : 注释在引用变量前, 自动回收资源 默认调用 close() 方法 @Getter/@Setter : 注解在类上, 为类提供读写属性 @Getter(lazy=true) : @ToString : 注解在类上, 为类提供 toString() 方法 @EqualsAndHashCode : 注解在类上, 为类提供 equals() 和 hashCode() 方法 @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor : 注解在类上, 为类提供无参,有指定必须参数, 全参构造函数 构造函数 @AllArgsConstructor会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验， 全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。 @NoArgsConstructor无参构造函数 @RequiredArgsConstructor会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。 @Data : 注解在类上, 为类提供读写属性, 此外还提供了 equals()、hashCode()、toString() 方法 @Value : @Builder : 注解在类上, 为类提供一个内部的 Builder @SneakThrows : @Synchronized : 注解在方法上, 为方法提供同步锁 @Log : @Log4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象 @Slf4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象 @Cleanup(“dispose”) org.eclipse.swt.widgets.CoolBar bar = new CoolBar(parent, 0); @Cleanup InputStream in = new FileInputStream(args[0]); @Cleanup OutputStream out = new FileOutputStream(args[1]);关闭流 @Synchronized：对象同步 @SneakyThrows：抛出异常 1234567891011121314@Datapublic class EnergySource &#123; private String energySourceId; private String fuel; private String industrialWater; private String gas; private String naturlGas; private String steam; private String oxygenNitrogen; private String compressedAir; private String dynamicMedium;&#125; 修改Banner src/main/resource下新建 banner.txt 通过http://patorjk.com/software/taag生成字符 将网站的字符复制到banner.txt中即可日志配置 默认情况下，Spring使用Logback作为日志框架配置： 12logging.file=D:/mylog/log.loglogging.level.org.springframework.web=DEBUG 编码格式 属性文件配置 pom文件配置 数据库配置 web pages配置 开发工具配置默认编码方式为UTF-8，修改如下1spring.http.encoding.charset=编码 Thymeleaf模板引擎springBoot 不推荐使用jsp（官方文档） When running a Spring Boot application that uses an embedded(内嵌式) servlet container (and is packaged as an executable archive), there are some limitations in the JSP support.With Jetty and Tomcat, it should work if you use war packaging. An executable war will work when launched with java -jar, and will also be deployable to any standard container. JSPs are not supported when using an executable jar.Undertow does not support JSPs.Creating a custom error.jsp page does not override the default view for error handling. Custom error pages should be used instead. 脚本静态文件根据默认原则，脚本样式、图片等静态文件应放置在src/main/resource/ststic下 SpringBoot 提供自动配置 … 自动配置静态资源 类路径文件：把类路径下的/static、/public、/resources和/META-INF/resources文件夹下的静态文件直接映射为/，可以通过http://localhost:8080/来访问 webjar /META-INF/resources/webjar—&gt;/webjar/** http://localhost:8080/webjar/**来访问 静态首页支持 把静态index.html放在如下目录： calsspath：/META-INF/resources/index.html calsspath：/static/index.html calsspath：/public/index.html calsspath：/resources/index.html 当我们访问根目录http://localhost:8080/时，会直接映射 SSL配置 HTTPS是以安全为目标的HTTP通道，简单讲就是 HTTP的安全版 生成证书 配置SSL http转向https设置网站图标 icon Favicon 第一步、你要确定你网站的主题和图案所选，因为favicon文件时代表你网站的标志。制作好图片之后就可以用工具制作了，具体请搜“favicon在线制作”，上传好图片后，就可以选择生成一个32x32像素或64x64像素的favicon文件。 第二步、将你做好的favicon图片文件上传至你网站的根目录下，即www目录下。且保证命名为favicon.ico。 第三步、将这句代码 放入到你各页面的之间。 将自己的favicon.ico（文件名不能变动）文件放置在类路径根目录，类路径下的/static、/public、/resources和/META-INF/resources文件夹下都可以 1&lt;link rel=\"icon\" href=\"images/favicon.ico\" type=\"image/x-icon\" /&gt; bootstrap 响应式布局最简单的BootStrap 模板 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-cn\" xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;meta content=\"text/html\"; charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\"&gt; &lt;!--以上代码IE=Edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame1，根据官网定义X-UA-compatible 标头不区分大小写；不过，它必须显示在网页中除 title 元素和其他 meta 元素以外的所有其他元素之前。如果不是的话，它不起作用2，content的内容是IE=8，或者IE=edge等值，注意不是IE8或者直接写个edge的值，否则不起作用。--&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;!--响应式 Web 设计 - Viewportwidth：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。height：和 width 相对应，指定高度。initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。maximum-scale：允许用户缩放到的最大比例。minimum-scale：允许用户缩放到的最小比例。user-scalable：用户是否可以手动缩放。--&gt; &lt;!--上面3个标签必须是head的头三个标签--&gt; &lt;title&gt;BootStrap 模板&lt;/title&gt; &lt;link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!--HTML 5 shim and Respond.js 用来让IE8 支持HTML6 元素和媒体查询--&gt; &lt;!--如果是IE 9--&gt; &lt;script src=\"js/html5shiv.min.js\" &gt;&lt;/script&gt; &lt;script src=\"js/respond.min.js\" &gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;!--jQuery 是BootStrap脚本必须的--&gt; &lt;script src=\"jquery.min.js\"&gt;&lt;/script&gt; &lt;!--包含所有编译的插件--&gt; &lt;script src=\"bootstrap/js/bootstrap.min.js\" &gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 生产 和 开发 环境的配置切换，profile的配置*使用maven的profile切换项目各环境的参数 * 生产环境环境配置application-prod.properties： 12&gt;server.port=8889&gt; 开发环境环境配置application-dev.properties： 12&gt;server.dev=8080&gt; application.properties中 12&gt;spring.profiles.active=[dev|prod]&gt; ![1565775897542](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565775897542.png) 数据缓存 Cache在SpringBoot环境下，使用缓存技术只需在项目中导入相关的缓存技术依赖包，并在配置类中使用@EnableCaching开启缓存支持即可 Spring data JPA","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/Shiro","date":"2019-09-12T08:32:36.585Z","updated":"2019-09-10T03:55:39.317Z","comments":true,"path":"2019/09/12/技术笔记/java/Shiro/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/Shiro/","excerpt":"","text":"https://www.cnblogs.com/learnhow/p/5694876.html Shiro对用户的约束也采用了这样的方式。AuthenticationInfo代表了用户的角色信息集合，AuthorizationInfo代表了角色的权限信息集合。 Shiro三大核心https://www.bilibili.com/video/av39289229/?p=2 Sunject:用户主体(把操作交给SecurityManager) SecurityManager:安全管理器（管理Realm） RealmShiro连接数据库的桥梁 pom.xml12345678910111213&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--日志工具包--&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt; ![1567995641894](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567995641894.png) ![1567993444699](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567993444699.png) ![1567993351851](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567993351851.png)![1567993404939](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567993404939.png) ![1567994254250](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994254250.png) ![1567994350815](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994350815.png) 角色&amp;权限![1567994434867](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994434867.png) 角色判断![1567994715621](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994715621.png) 权限判断![1567994748542](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994748542.png) ![1567994866169](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567994866169.png) 自定义ini文件和realmRealm 域![1567995735371](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567995735371.png) jdbcRealm 使用mysql数据源![1567996132763](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996132763.png) 用户表 ![1567996233363](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996233363.png) 用户角色表 ![1567996210876](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996210876.png) 角色权限表 ![1567996249100](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996249100.png) shiro-mysql.ini ![1567996498973](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996498973.png)–![1567996562109](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996562109.png) 测试![1567996648550](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567996648550.png) https://www.bilibili.com/video/av40342174/?p=5 导入shiro与spring的整合依赖 123456&lt;!--shiro与spring的整合依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt;&lt;/dependency&gt; 自定义Realm ![1567997734324](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567997734324.png) 编写Shiro配置类 ![1567997619758](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567997619758.png) ![1567997887266](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567997887266.png) ![1567997899858](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567997899858.png) ![1567998075014](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998075014.png) 过滤器![1567998259856](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998259856.png) ![1567998340345](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998340345.png) ![1567998434922](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998434922.png) ![1567998546748](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998546748.png) 实现用户登录（认证）的操作![1567998843305](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998843305.png) ![1567998871616](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998871616.png) ![1567998985738](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567998985738.png) ![1567999306078](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567999306078.png) 编写配置文件![1567999970183](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567999970183.png) 编写pojo,mapper,service，UserRealm,LoginController![1567999782776](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567999782776.png) ![1567999916385](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1567999916385.png) SpringBoot与Shiro整合实现用户授权![1568000441298](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568000441298.png) ![1568000463438](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568000463438.png) 给用户授权前后端完全分离的项目授权会出现跨域问题 ![1568000591784](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568000591784.png) 关联数据库实现动态授权thymeleaf整合Shrio权限标签pom![1568001515534](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568001515534.png) 配置ShiroDialect![1568001557467](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568001557467.png) ![1568001649259](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1568001649259.png)","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/Redis","date":"2019-09-12T08:32:36.584Z","updated":"2019-08-30T09:23:37.122Z","comments":true,"path":"2019/09/12/技术笔记/java/Redis/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/Redis/","excerpt":"","text":"Redis1 Redis 简介Redis是完全开源免费的，遵守BSD协议，是一个高性能的（NoSQL）的ket-value数据库。 支持多种类型的数据结构（String,list,hash,set,zset） 单线程，原子性 可以持久化，因为使用了RDB和AOF机制 支持集群 而且Redis支持库（0~15）16个库 可以做消息队列，比如聊天室IM 总结： 优点：数据结构丰富，读写高速 缺点：耗内存，持久化 2 Redis安装Redi官网 2.1 Redis安装Redis是C语言开发，安装Redis需要将官网下载的源码进行编译，编译依赖gcc环境 2.2 安装gcc root登录 Linux可连接外网 1yum -y install gcc automake autoconf libtool make 注意：运行yum时出现/var/run/yum.pid已被锁定，PID为xxx的另一个程序正在运行的问题解决 1rm -f /var/run/yum.pid","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/java命名","date":"2019-09-12T08:32:36.583Z","updated":"2019-09-07T03:03:06.909Z","comments":true,"path":"2019/09/12/技术笔记/java/java命名/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/java命名/","excerpt":"","text":"java项目命名规范 1、 项目名全部小写 2、 包名全部小写 3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。 如：public class MyFirstClass{} 4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。 如：int index=0; ​ public void toString(){} 5、 常量名全部大写 如：public static final String GAME_COLOR=”RED”; 6、所有命名规则必须遵循以下规则： 1)、名称只能由字母、数字、下划线、$符号组成 2)、不能以数字开头 3)、名称不能使用JAVA中的关键字。 4)、坚决不允许出现中文及拼音命名。","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/JavaProjectStruct","date":"2019-09-12T08:32:36.581Z","updated":"2019-08-13T01:35:12.854Z","comments":true,"path":"2019/09/12/技术笔记/java/JavaProjectStruct/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/JavaProjectStruct/","excerpt":"","text":"projectName(MyBatis &amp; SpringBoot)srcmainjavaMyApplication.javaJava File StructureresourceMETA-INF[mybatis|mapper]–&gt;XxxMapper.xmlsql- xxx.sqlstatic–&gt;(CSS、js、fonts、images)templates(web pages eg:.hrml ,.jsp)application.[yml|yaml|properties]testjava.gitinorepom.xml","categories":[],"tags":[]},{"title":"","slug":"技术笔记/java/IO流","date":"2019-09-12T08:32:36.581Z","updated":"2019-08-16T01:35:51.451Z","comments":true,"path":"2019/09/12/技术笔记/java/IO流/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/java/IO流/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"技术笔记/数据结构","date":"2019-09-12T08:32:36.578Z","updated":"2019-08-10T00:40:25.629Z","comments":true,"path":"2019/09/12/技术笔记/数据结构/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/数据结构/","excerpt":"","text":"第一讲第二讲 线性结构线性表及其表现经典案例：多项式 数组表示多项式。系数a[i]表示，指数为数组下标![1565310250441](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565310250441.png) 顺序存储结构只表示非零项 系数a[i]表示，指数为i![1565310463262](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565310463262.png) 链表结构存储非零项链表中每个结点存储多项式中的一个非零项，包括系数和指数两个数据域以及一个指针域 coef expon link 123456typedef struct PloyNode *Ploynomial;struct PloyNode&#123; int coef; int expon; Polynomial link;&#125; 例如：$$P1(x)=9X^{12}+15X^{8}-13X^{6}$$P1–&gt;| 9 | 12 | |–&gt;| 15 | 8 | |–&gt;| 3 | 2 | null |$$P2(x)=26X^{19}-4X^{8}+3X^{2}+82$$P2–&gt;| 26 | 19 | |–&gt;| -4 | 8 | |–&gt;| -13 | 6 | |–&gt;| 82 | 0 | null | 第三讲","categories":[],"tags":[]},{"title":"","slug":"技术笔记/HTML笔记","date":"2019-09-12T08:32:36.576Z","updated":"2019-09-06T02:04:01.330Z","comments":true,"path":"2019/09/12/技术笔记/HTML笔记/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/HTML笔记/","excerpt":"","text":"bootstrap 响应式布局最简单的BootStrap 模板 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-cn\" xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;meta content=\"text/html\"; charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\"&gt; &lt;!--以上代码IE=Edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame1，根据官网定义X-UA-compatible 标头不区分大小写；不过，它必须显示在网页中除 title 元素和其他 meta 元素以外的所有其他元素之前。如果不是的话，它不起作用2，content的内容是IE=8，或者IE=edge等值，注意不是IE8或者直接写个edge的值，否则不起作用。--&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;!--响应式 Web 设计 - Viewportwidth：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。height：和 width 相对应，指定高度。initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。maximum-scale：允许用户缩放到的最大比例。minimum-scale：允许用户缩放到的最小比例。user-scalable：用户是否可以手动缩放。--&gt; &lt;!--上面3个标签必须是head的头三个标签--&gt; &lt;title&gt;BootStrap 模板&lt;/title&gt; &lt;link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!--HTML 5 shim and Respond.js 用来让IE8 支持HTML6 元素和媒体查询--&gt; &lt;!--如果是IE 9--&gt; &lt;script src=\"js/html5shiv.min.js\" &gt;&lt;/script&gt; &lt;script src=\"js/respond.min.js\" &gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;!--jQuery 是BootStrap脚本必须的--&gt; &lt;script src=\"jquery.min.js\"&gt;&lt;/script&gt; &lt;!--包含所有编译的插件--&gt; &lt;script src=\"bootstrap/js/bootstrap.min.js\" &gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; meta 标签meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。 Meta标签使用技巧：Meta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。要想网站做的更符合搜索引擎标准就必须了解meta标签，meta标签含义与使用方法： META标签的 keywords 写法为： meat标签的Keywords的的信息参数，代表说明网站的关键词是什么。 META标签的Description meta标签的Description的信息参数，代表说明网站的主要内容，概况是什么。 META标签的 http-equiv=Content-Type content=”text/html http-equiv=Content-Type代表的是HTTP的头部协议，提示浏览器网页的信息， meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文； meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文； meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文； meta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文； meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文； meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码； META标签的generator meta标签的generator的信息参数，代表说明网站的采用的什么软件制作。 META标签的author meta标签的author的信息参数，代表说明网页版权作者信息。 META标签的http-equiv=”Refresh” meta标签的Refresh代表多少时间网页自动刷新，加上Url中的网址参数就代表，多长时间自动链接其他网址。 META标签的HTTP-EQUIV=”Pragma”CONTENT=”no-cache” 代表禁止浏览器从本地计算机的缓存中访问页面内容,这样设定，访问者将无法脱机浏览。 META标签的COPYRIGHT meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。 META标签的http-equiv=”imagetoolbar” 指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。 META标签的Content-Script-Type W3C网页规范，指明页面中脚本的类型。 META标签的revisit-after revisit-after代表网站重访,7days代表7天，依此类推。 META标签的Robots Robots代表告诉搜索引擎机器人抓取哪些页面 其中的属性说明如下： 信息参数为all：文件将被检索，且页面上的链接可以被查询； 信息参数为none：文件将不被检索，且页面上的链接不可以被查询； 信息参数为index：文件将被检索； 信息参数为follow：页面上的链接可以被查询； 信息参数为noindex：文件将不被检索，但页面上的链接可以被查询； 信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询； javascript从历史上看（自 Netsacpe 2 诞生起），在 script 标签上是否写上 type=text/javascript 没有什么关系。如果你通过 type 设置一个非 JavaScript 的 MIME 类型，浏览器不会执行它。 JSP request.getContextPath() 1234567891011121314151617181920212223&lt;% String path = request.getContextPath(); // 获得项目完全路径（假设你的项目叫MyApp，那么获得到的地址就是 http://localhost:8080/MyApp/）: String basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\"; request.setAttribute(\"contextPath\", basePath); String imgBasePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort(); request.setAttribute(\"imgBasePath\", imgBasePath);%&gt;&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;电网-登录&lt;/title&gt; &lt;link rel=\"icon\" href=\"$&#123;contextPath&#125;img/favicon.ico\" type=\"image/x-icon\" /&gt; &lt;link rel=\"stylesheet\" href=\"$&#123;contextPath&#125;bootstrap/css/bootstrap.css\"&gt; &lt;%--http://localhost:8080/power_system_manager/css/normalize.min.css--%&gt; &lt;link rel=\"stylesheet\" href=\"$&#123;contextPath&#125;css/normalize.min.css\"&gt; &lt;link rel=\"stylesheet\" href=\"$&#123;contextPath&#125;css/public.css\"&gt; &lt;link rel=\"stylesheet\" href=\"$&#123;contextPath&#125;css/index.css\"&gt; &lt;script src=\"$&#123;contextPath&#125;js/jquery-3.2.1.min.js\"&gt;&lt;/script&gt; &lt;script src=\"$&#123;contextPath&#125;js/index.js\"&gt;&lt;/script&gt; &lt;script src=\"$&#123;contextPath&#125;layui-v2.5.4/layui/layui.all.js\"&gt;&lt;/script&gt;","categories":[],"tags":[]},{"title":"","slug":"技术笔记/BrainStorm","date":"2019-09-12T08:32:36.575Z","updated":"2019-09-02T09:47:14.115Z","comments":true,"path":"2019/09/12/技术笔记/BrainStorm/","link":"","permalink":"http://yoursite.com/2019/09/12/技术笔记/BrainStorm/","excerpt":"","text":"应用构想餐厅点餐系统 客户端——微信小程序/app端 服务端——web/桌面端/APP端跑腿APP 毕业设计商城高校基地（论坛） 客户端开发环境 Android&amp;web（[html5 + ,vue]/thymeleaf） 服务端 IntelliJ IDEA 学生管理系统中老年人就业机会分析与解决方案","categories":[],"tags":[]},{"title":"","slug":"llyc30","date":"2019-08-08T09:55:37.920Z","updated":"2019-08-16T01:33:55.617Z","comments":true,"path":"2019/08/08/llyc30/","link":"","permalink":"http://yoursite.com/2019/08/08/llyc30/","excerpt":"","text":"unit 30（6） upheaval aggregation maladapted （1） fume v. 发怒，生气，冒烟 同义词 inflame explosive and inflammable 易燃易爆炸物 hospitality be hostile to 对。。。有敌意 hostility 敌意，敌对状态 journalism 新闻业 exception 例外，异常，异议 hemisphere n. 半球 atmosphere 大气层 semi-final 半决赛 incompetent ad. 不合格的，不胜任的，能干的，足够的 competently adv. 胜任地，称职地，有…能力地 incompetently adv. 不称职地，不胜任地 incompetent to do sth. 不能做某事 be competent to do sth. 能胜任某事 be qualified/eligible for 有能力的，能胜任。。。 hydrogen n. 氢 Oxygen 氧气 ingredient n. 组成成分，成分，要素，因素(具体 factor n. 因素，要素，系数 （抽象） dominate 主导，决定性，主要 element n. 【化学】元素 component n. 组成，零件 compose vt. be compose of comprise vt. be comprise of inject v. 注射，注入（某种特性） injection n. 注射，注射剂，充血，射入轨道 the injection ofvaccine 疫苗注射 vaccinate 注射疫苗 vaccination 接种疫苗 inject into 注入，增添 inset v. 嵌入，插入 be embeded in my heart 嵌入 install v. 安装，安置 lest conj. 唯恐，以免，免得 nction n. 交叉点，接合处，枢纽站（虹桥）；连接，接合 disjunction n. 分离，折断，脱节 conjunction n. （事件同时发生；同地发生 occurrence concurrence in conjunction with conjuncture n. a critical combination of events 事件的重大合并 juncture 时机，关头 turning point conj. 连词 Graduate Management Admission Test 管理类研究生入学测试 connection n. 连接；联系；连接点 joint adj. 共同的，联合的 n. 关节，接合处 lung n. 肺 liver 肝脏 heart stomach 胃 spleen 脾 pancreas 胰腺 pancreas cancer 胰腺癌 at the top of (one’s) lungs 尽可能响亮地 microscope n.显微镜 telescope 望远镜 telecom 电信 mold v. 塑造；形成；浇铸；造型 n.模子；铸型 remold v. 改造，重铸 mold sb./sth. into sb./sth. 把 … 发展为… ，把 … 塑造成 … nerve n. 神经，勇气，胆量，【医】神经紧张 wake nerve 神经紧张 nervous 紧张不安的；神经系统的；神经过敏过的 turnover 销售额；人流流动率；失误（体育场） boards 董事会 （2） nonsense n.胡说，废话 prioneer n. 先驱，倡导者，开拓者 forerunner n. 先驱 predecessor n. 前任；前辈 practitioner n. 开业者（医生、律师等）；从业者 refreshment n.点心；饮料；精力恢复；爽快 refreshing adj. 使人耳目一新的；新鲜的；使人精神焕发的；使人恢复精神的 dwellers 居民 dwell 居住 provide sb. with sth. for sth. 为了… 给某人提供某物 respectively adv. 分别地，各自地 aspect n.方面 individually adv. 分别地 slogan n. 标语；口号 写作：As one of the slogans of my favorite NBA team Boston Celtics goes:”Youth Is Served(青春无极限)”, which means it is worth trying to brace for any challenge in the name of “We Are Young”.（以年轻的名义） 歌曲 Fun-We Are Young motto n. 座右铭 proverb n. 谚语；格言 stumble v. 偶然发现；跌；绊；结结巴巴地说话 n. 跌；绊 stumble across 偶然发现 bump n. 肿块 v. 碰撞 encounter into stumble upon偶尔发现 tumble v. 跌倒 symposium n.研讨会，专题讨论会，专题论文集 vigorous adj. 有力的；朝气蓬勃的；精神旺盛的；语言犀利的 vigorously adv. 精神旺盛的；有力的 egregiously&lt;–&gt;especially merit pay 绩效工资 drawn-out battles 持久战 robust ad. 精力充沛的；坚定的；坚决的 virus n. 病毒,(精神道德方面的）有害影响 abreast adv. 齐肩的；并排的；了解的；跟上（了解最新情况） breadth n. 宽广；广度；广泛性 obscuring 模糊处理；不描述清楚 illumunate 阐明 set back 挫败 abreast of 与…并排；与…并列 keep abreast of 跟上；保持并列 catch up with 追上/赶上… keep in line with 和…保持一致 line up A with B 把A和B并列 bellyful n. 过量；满腹-a bellyful of complaints/knowledge 满腹抱怨/才华 weary ad. 疲倦的；疲劳的；令人厌烦的 v.使疲倦；使厌烦-exhausted ad. 耗尽的 exhaustible 不可再生的 inexhaustible 可再生的 divorce v. 与…离婚；分离 n. 离婚；分离 casualty 【casualties】 n. 伤亡人数；受害人 incapable ad. 无能为力的；不能的；不会的 capacity 容量；能力 be capable of 有能力做某事；在某方面有能力 adolescence/ent 青春期 idol 偶像 puberty 青春期 shut down 关闭 so of life (3) cape n. 披肩；斗篷；海角 escape v./n.逃跑；逃离；逃脱；躲过 scapegoat n.替罪羊；待人受罪的人； assault v./n. 攻击；袭击 -assault on sb. 攻击某人 initiate an assault on 发起一次袭击 bearing n.关系；举止；风度；生育；生育期；方位；方向感；轴承 -have some bearing on 和…有关 bear n.熊 tansfer n. 站让；转移；传递 v.（使）调动；使换岗 transmit teach，spread transmission 传送（我发送（是我的事），你接收（你的事）） transferable ad. 可转移的，可转让的 transmissible 可传授的 comedy n. 喜剧（片）；喜剧表演 tragedy n.悲剧 tragic tragical comic comical comics n. 连环画 zigzag v. 曲折前行 n. 之字形；锯齿形线条 ； ad. 之字形的；z字型的 zigzag lines 荆棘之路，艰难的道路 （自译） relieve v. 减轻；使（从…中解脱出来；减少；换班；换岗（shift） relief n.缓解；减轻；解脱；安慰；欣慰 alleviate v. 减轻；缓和 写作素材 As one of the slogans of my favorite NBA team Boston Celtics goes:”Youth Is Served(青春无极限)”, which means it is worth trying to brace for any challenge in the name of “We Are Young”.（以年轻的名义 Focus on the future. zigzag lines set back 挫败 drawn-out battles 持久战 You shou go off the beaten tracks. 打破常规走自己的路 毛主席 Chairman MAO","categories":[],"tags":[]},{"title":"","slug":"自建Blog","date":"2019-08-07T08:46:30.870Z","updated":"2019-08-08T10:02:57.239Z","comments":true,"path":"2019/08/07/自建Blog/","link":"","permalink":"http://yoursite.com/2019/08/07/自建Blog/","excerpt":"","text":"hexo 博客框架 自建静态博客 CodeSheep参考视频 环境准备 安装 GIT 安装 node.js:node,js download![1565082721207](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565082721207.png) 检查是否安装成功![1565083016444](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565083016444.png) 由于国内互联网环境，导致npm下载失败，可使用npm淘宝镜像cnpm* ![1565084247504](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565084247504.png) 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装 1hexo cnpm install -g hexo-cli ![1565084789098](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565084789098.png) 搭建启动部署博客 新建一个放置博客文件的专属文件夹，在命令行下将路径切换到文件夹所在路径 博客初始化 命令行输入 hexo init 【mac os 输入 sudo hexo init】 启动 hexo s ![1565144387885](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565144387885.png) 新建一篇文章 hexo n “我的第一篇博客文章.md” github 新建一个仓库 用户名.github.io jmp.github.io 安装cnpm插件 1cnpm install --save hexo-deployer-git 修改_config.yml文件，在文件底部这样修改![1565168436408](C:\\Users\\Monica J\\AppData\\Roaming\\Typora\\typora-user-images\\1565168436408.png) 123type: gitrepo: https://github.com/870727741/870727741.github.io.gitbranch: master 部署到远端 hexo d 博文用Markdown写，后缀名为.md，放在post文件夹里。每次写完，hexo g -d生成部署 更换blog主题 路径切换到blog文件夹下面 1&gt;git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置文件 blog/_config.ymlstart _config.yml 1234theme: yilia&gt;hexo c &gt;hexo g &gt;hexo s 总结注意事项 git,github,repositories所有用户名/账户名一致一一致！ 每行命令失败先检查当前行是否敲错，根据错误提示检查敲过的命令是否生效","categories":[],"tags":[]}]}